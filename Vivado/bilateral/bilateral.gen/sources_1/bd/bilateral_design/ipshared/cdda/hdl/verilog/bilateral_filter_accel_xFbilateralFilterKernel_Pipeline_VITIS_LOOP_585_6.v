// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module bilateral_filter_accel_xFbilateralFilterKernel_Pipeline_VITIS_LOOP_585_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_7,
        exp_lut_sigma_color_address0,
        exp_lut_sigma_color_ce0,
        exp_lut_sigma_color_we0,
        exp_lut_sigma_color_d0,
        exp_lut_sigma_color_1_address0,
        exp_lut_sigma_color_1_ce0,
        exp_lut_sigma_color_1_we0,
        exp_lut_sigma_color_1_d0,
        grp_fu_606_p_din0,
        grp_fu_606_p_dout0,
        grp_fu_606_p_ce,
        grp_xFBilateralExpf_fu_150_p_din1,
        grp_xFBilateralExpf_fu_150_p_dout0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tmp_7;
output  [9:0] exp_lut_sigma_color_address0;
output   exp_lut_sigma_color_ce0;
output   exp_lut_sigma_color_we0;
output  [15:0] exp_lut_sigma_color_d0;
output  [9:0] exp_lut_sigma_color_1_address0;
output   exp_lut_sigma_color_1_ce0;
output   exp_lut_sigma_color_1_we0;
output  [15:0] exp_lut_sigma_color_1_d0;
output  [31:0] grp_fu_606_p_din0;
input  [63:0] grp_fu_606_p_dout0;
output   grp_fu_606_p_ce;
output  [31:0] grp_xFBilateralExpf_fu_150_p_din1;
input  [31:0] grp_xFBilateralExpf_fu_150_p_dout0;

reg ap_idle;
reg exp_lut_sigma_color_ce0;
reg exp_lut_sigma_color_we0;
reg[15:0] exp_lut_sigma_color_d0;
reg exp_lut_sigma_color_1_ce0;
reg exp_lut_sigma_color_1_we0;
reg[15:0] exp_lut_sigma_color_1_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln585_fu_169_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [9:0] m_1_reg_414;
reg   [9:0] m_1_reg_414_pp0_iter1_reg;
reg   [9:0] m_1_reg_414_pp0_iter2_reg;
reg   [9:0] m_1_reg_414_pp0_iter3_reg;
reg   [9:0] m_1_reg_414_pp0_iter4_reg;
reg   [9:0] m_1_reg_414_pp0_iter5_reg;
reg   [9:0] m_1_reg_414_pp0_iter6_reg;
reg   [9:0] m_1_reg_414_pp0_iter7_reg;
reg   [9:0] m_1_reg_414_pp0_iter8_reg;
reg   [9:0] m_1_reg_414_pp0_iter9_reg;
reg   [9:0] m_1_reg_414_pp0_iter10_reg;
reg   [9:0] m_1_reg_414_pp0_iter11_reg;
reg   [9:0] m_1_reg_414_pp0_iter12_reg;
reg   [9:0] m_1_reg_414_pp0_iter13_reg;
reg   [9:0] m_1_reg_414_pp0_iter14_reg;
reg   [9:0] m_1_reg_414_pp0_iter15_reg;
reg   [9:0] m_1_reg_414_pp0_iter16_reg;
reg   [9:0] m_1_reg_414_pp0_iter17_reg;
reg   [9:0] m_1_reg_414_pp0_iter18_reg;
reg   [9:0] m_1_reg_414_pp0_iter19_reg;
reg   [9:0] m_1_reg_414_pp0_iter20_reg;
reg   [9:0] m_1_reg_414_pp0_iter21_reg;
reg   [9:0] m_1_reg_414_pp0_iter22_reg;
reg   [9:0] m_1_reg_414_pp0_iter23_reg;
reg   [9:0] m_1_reg_414_pp0_iter24_reg;
reg   [9:0] m_1_reg_414_pp0_iter25_reg;
reg   [9:0] m_1_reg_414_pp0_iter26_reg;
reg   [9:0] m_1_reg_414_pp0_iter27_reg;
reg   [9:0] m_1_reg_414_pp0_iter28_reg;
reg   [9:0] m_1_reg_414_pp0_iter29_reg;
reg   [9:0] m_1_reg_414_pp0_iter30_reg;
reg   [9:0] m_1_reg_414_pp0_iter31_reg;
reg   [9:0] m_1_reg_414_pp0_iter32_reg;
reg   [9:0] m_1_reg_414_pp0_iter33_reg;
reg   [9:0] m_1_reg_414_pp0_iter34_reg;
reg   [9:0] m_1_reg_414_pp0_iter35_reg;
reg   [9:0] m_1_reg_414_pp0_iter36_reg;
reg   [0:0] icmp_ln585_reg_419;
reg   [0:0] icmp_ln585_reg_419_pp0_iter1_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter2_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter3_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter4_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter5_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter6_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter7_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter8_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter9_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter10_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter11_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter12_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter13_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter14_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter15_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter16_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter17_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter18_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter19_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter20_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter21_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter22_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter23_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter24_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter25_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter26_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter27_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter28_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter29_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter30_reg;
reg   [0:0] icmp_ln585_reg_419_pp0_iter31_reg;
wire   [19:0] jsq_fu_185_p2;
reg   [19:0] jsq_reg_423;
wire   [31:0] grp_fu_155_p1;
reg   [31:0] conv_reg_433;
wire   [31:0] grp_xFBilateralFloatMul_fu_130_ap_return;
reg   [31:0] tmp_8_reg_438;
wire   [31:0] grp_xFBilateralFloatMul_fu_137_ap_return;
reg   [31:0] tmp_9_reg_443;
reg   [31:0] tmp_s_reg_448;
wire   [31:0] grp_xFBilateralFloatMul_fu_144_ap_return;
reg   [31:0] tmp_2_reg_453;
reg   [31:0] tmp_2_reg_453_pp0_iter33_reg;
reg   [31:0] tmp_2_reg_453_pp0_iter34_reg;
reg   [31:0] tmp_2_reg_453_pp0_iter35_reg;
wire   [62:0] trunc_ln595_fu_204_p1;
reg   [62:0] trunc_ln595_reg_459;
reg   [0:0] tmp_reg_464;
reg   [10:0] tmp_1_reg_469;
wire   [51:0] trunc_ln595_1_fu_226_p1;
reg   [51:0] trunc_ln595_1_reg_474;
wire   [53:0] select_ln595_fu_250_p3;
reg   [53:0] select_ln595_reg_479;
wire   [0:0] icmp_ln595_fu_257_p2;
reg   [0:0] icmp_ln595_reg_486;
reg   [0:0] icmp_ln595_reg_486_pp0_iter36_reg;
wire   [0:0] icmp_ln595_1_fu_278_p2;
reg   [0:0] icmp_ln595_1_reg_490;
reg   [0:0] icmp_ln595_1_reg_490_pp0_iter36_reg;
wire  signed [11:0] select_ln595_1_fu_296_p3;
reg  signed [11:0] select_ln595_1_reg_494;
wire   [0:0] icmp_ln595_2_fu_304_p2;
reg   [0:0] icmp_ln595_2_reg_501;
reg   [0:0] icmp_ln595_2_reg_501_pp0_iter36_reg;
wire   [15:0] select_ln595_3_fu_341_p3;
reg   [15:0] select_ln595_3_reg_505;
wire   [15:0] select_ln595_2_fu_386_p3;
reg   [15:0] select_ln595_2_reg_511;
wire   [15:0] trunc_ln595_2_fu_394_p1;
reg   [15:0] trunc_ln595_2_reg_517;
wire    ap_block_pp0_stage0;
wire   [63:0] m_cast_fu_397_p1;
reg   [9:0] m_fu_92;
wire   [9:0] m_2_fu_175_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_m_1;
wire   [31:0] grp_fu_155_p0;
wire   [9:0] jsq_fu_185_p0;
wire   [19:0] zext_ln586_fu_181_p1;
wire   [9:0] jsq_fu_185_p1;
wire   [63:0] bitcast_ln724_fu_200_p1;
wire   [52:0] zext_ln595_1_cast_fu_233_p3;
wire   [53:0] zext_ln595_1_fu_240_p1;
wire   [53:0] sub_ln595_fu_244_p2;
wire   [11:0] zext_ln595_fu_230_p1;
wire   [11:0] sub_ln595_1_fu_262_p2;
wire   [7:0] tmp_3_fu_268_p4;
wire   [11:0] add_ln595_fu_284_p2;
wire   [11:0] sub_ln595_2_fu_290_p2;
wire   [7:0] tmp_5_fu_316_p4;
wire  signed [31:0] sext_ln595_fu_310_p1;
wire   [15:0] trunc_ln595_4_fu_313_p1;
wire   [15:0] sext_ln595cast_fu_331_p1;
wire   [0:0] icmp_ln595_4_fu_325_p2;
wire   [15:0] shl_ln595_fu_335_p2;
wire   [53:0] zext_ln595_2_fu_354_p1;
wire   [53:0] ashr_ln595_fu_358_p2;
wire   [31:0] bitcast_ln724_1_fu_367_p1;
wire   [0:0] tmp_4_fu_370_p3;
wire   [0:0] icmp_ln595_3_fu_349_p2;
wire   [15:0] trunc_ln595_3_fu_363_p1;
wire   [15:0] select_ln595_4_fu_378_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_511;
reg    ap_condition_515;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_done_reg = 1'b0;
end

bilateral_filter_accel_xFBilateralFloatMul grp_xFBilateralFloatMul_fu_130(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val1(32'd936490775),
    .in_val2(conv_reg_433),
    .ap_return(grp_xFBilateralFloatMul_fu_130_ap_return)
);

bilateral_filter_accel_xFBilateralFloatMul grp_xFBilateralFloatMul_fu_137(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val1(32'd3204448256),
    .in_val2(tmp_8_reg_438),
    .ap_return(grp_xFBilateralFloatMul_fu_137_ap_return)
);

bilateral_filter_accel_xFBilateralFloatMul grp_xFBilateralFloatMul_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val1(tmp_s_reg_448),
    .in_val2(tmp_7),
    .ap_return(grp_xFBilateralFloatMul_fu_144_ap_return)
);

bilateral_filter_accel_uitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_6_no_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .ce(1'b1),
    .dout(grp_fu_155_p1)
);

bilateral_filter_accel_mul_10ns_10ns_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 20 ))
mul_10ns_10ns_20_1_1_U40(
    .din0(jsq_fu_185_p0),
    .din1(jsq_fu_185_p1),
    .dout(jsq_fu_185_p2)
);

bilateral_filter_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter36_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln585_fu_169_p2 == 1'd0))) begin
            m_fu_92 <= m_2_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            m_fu_92 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        conv_reg_433 <= grp_fu_155_p1;
        icmp_ln585_reg_419_pp0_iter10_reg <= icmp_ln585_reg_419_pp0_iter9_reg;
        icmp_ln585_reg_419_pp0_iter11_reg <= icmp_ln585_reg_419_pp0_iter10_reg;
        icmp_ln585_reg_419_pp0_iter12_reg <= icmp_ln585_reg_419_pp0_iter11_reg;
        icmp_ln585_reg_419_pp0_iter13_reg <= icmp_ln585_reg_419_pp0_iter12_reg;
        icmp_ln585_reg_419_pp0_iter14_reg <= icmp_ln585_reg_419_pp0_iter13_reg;
        icmp_ln585_reg_419_pp0_iter15_reg <= icmp_ln585_reg_419_pp0_iter14_reg;
        icmp_ln585_reg_419_pp0_iter16_reg <= icmp_ln585_reg_419_pp0_iter15_reg;
        icmp_ln585_reg_419_pp0_iter17_reg <= icmp_ln585_reg_419_pp0_iter16_reg;
        icmp_ln585_reg_419_pp0_iter18_reg <= icmp_ln585_reg_419_pp0_iter17_reg;
        icmp_ln585_reg_419_pp0_iter19_reg <= icmp_ln585_reg_419_pp0_iter18_reg;
        icmp_ln585_reg_419_pp0_iter20_reg <= icmp_ln585_reg_419_pp0_iter19_reg;
        icmp_ln585_reg_419_pp0_iter21_reg <= icmp_ln585_reg_419_pp0_iter20_reg;
        icmp_ln585_reg_419_pp0_iter22_reg <= icmp_ln585_reg_419_pp0_iter21_reg;
        icmp_ln585_reg_419_pp0_iter23_reg <= icmp_ln585_reg_419_pp0_iter22_reg;
        icmp_ln585_reg_419_pp0_iter24_reg <= icmp_ln585_reg_419_pp0_iter23_reg;
        icmp_ln585_reg_419_pp0_iter25_reg <= icmp_ln585_reg_419_pp0_iter24_reg;
        icmp_ln585_reg_419_pp0_iter26_reg <= icmp_ln585_reg_419_pp0_iter25_reg;
        icmp_ln585_reg_419_pp0_iter27_reg <= icmp_ln585_reg_419_pp0_iter26_reg;
        icmp_ln585_reg_419_pp0_iter28_reg <= icmp_ln585_reg_419_pp0_iter27_reg;
        icmp_ln585_reg_419_pp0_iter29_reg <= icmp_ln585_reg_419_pp0_iter28_reg;
        icmp_ln585_reg_419_pp0_iter2_reg <= icmp_ln585_reg_419_pp0_iter1_reg;
        icmp_ln585_reg_419_pp0_iter30_reg <= icmp_ln585_reg_419_pp0_iter29_reg;
        icmp_ln585_reg_419_pp0_iter31_reg <= icmp_ln585_reg_419_pp0_iter30_reg;
        icmp_ln585_reg_419_pp0_iter3_reg <= icmp_ln585_reg_419_pp0_iter2_reg;
        icmp_ln585_reg_419_pp0_iter4_reg <= icmp_ln585_reg_419_pp0_iter3_reg;
        icmp_ln585_reg_419_pp0_iter5_reg <= icmp_ln585_reg_419_pp0_iter4_reg;
        icmp_ln585_reg_419_pp0_iter6_reg <= icmp_ln585_reg_419_pp0_iter5_reg;
        icmp_ln585_reg_419_pp0_iter7_reg <= icmp_ln585_reg_419_pp0_iter6_reg;
        icmp_ln585_reg_419_pp0_iter8_reg <= icmp_ln585_reg_419_pp0_iter7_reg;
        icmp_ln585_reg_419_pp0_iter9_reg <= icmp_ln585_reg_419_pp0_iter8_reg;
        icmp_ln595_1_reg_490_pp0_iter36_reg <= icmp_ln595_1_reg_490;
        icmp_ln595_2_reg_501_pp0_iter36_reg <= icmp_ln595_2_reg_501;
        icmp_ln595_reg_486 <= icmp_ln595_fu_257_p2;
        icmp_ln595_reg_486_pp0_iter36_reg <= icmp_ln595_reg_486;
        m_1_reg_414_pp0_iter10_reg <= m_1_reg_414_pp0_iter9_reg;
        m_1_reg_414_pp0_iter11_reg <= m_1_reg_414_pp0_iter10_reg;
        m_1_reg_414_pp0_iter12_reg <= m_1_reg_414_pp0_iter11_reg;
        m_1_reg_414_pp0_iter13_reg <= m_1_reg_414_pp0_iter12_reg;
        m_1_reg_414_pp0_iter14_reg <= m_1_reg_414_pp0_iter13_reg;
        m_1_reg_414_pp0_iter15_reg <= m_1_reg_414_pp0_iter14_reg;
        m_1_reg_414_pp0_iter16_reg <= m_1_reg_414_pp0_iter15_reg;
        m_1_reg_414_pp0_iter17_reg <= m_1_reg_414_pp0_iter16_reg;
        m_1_reg_414_pp0_iter18_reg <= m_1_reg_414_pp0_iter17_reg;
        m_1_reg_414_pp0_iter19_reg <= m_1_reg_414_pp0_iter18_reg;
        m_1_reg_414_pp0_iter20_reg <= m_1_reg_414_pp0_iter19_reg;
        m_1_reg_414_pp0_iter21_reg <= m_1_reg_414_pp0_iter20_reg;
        m_1_reg_414_pp0_iter22_reg <= m_1_reg_414_pp0_iter21_reg;
        m_1_reg_414_pp0_iter23_reg <= m_1_reg_414_pp0_iter22_reg;
        m_1_reg_414_pp0_iter24_reg <= m_1_reg_414_pp0_iter23_reg;
        m_1_reg_414_pp0_iter25_reg <= m_1_reg_414_pp0_iter24_reg;
        m_1_reg_414_pp0_iter26_reg <= m_1_reg_414_pp0_iter25_reg;
        m_1_reg_414_pp0_iter27_reg <= m_1_reg_414_pp0_iter26_reg;
        m_1_reg_414_pp0_iter28_reg <= m_1_reg_414_pp0_iter27_reg;
        m_1_reg_414_pp0_iter29_reg <= m_1_reg_414_pp0_iter28_reg;
        m_1_reg_414_pp0_iter2_reg <= m_1_reg_414_pp0_iter1_reg;
        m_1_reg_414_pp0_iter30_reg <= m_1_reg_414_pp0_iter29_reg;
        m_1_reg_414_pp0_iter31_reg <= m_1_reg_414_pp0_iter30_reg;
        m_1_reg_414_pp0_iter32_reg <= m_1_reg_414_pp0_iter31_reg;
        m_1_reg_414_pp0_iter33_reg <= m_1_reg_414_pp0_iter32_reg;
        m_1_reg_414_pp0_iter34_reg <= m_1_reg_414_pp0_iter33_reg;
        m_1_reg_414_pp0_iter35_reg <= m_1_reg_414_pp0_iter34_reg;
        m_1_reg_414_pp0_iter36_reg <= m_1_reg_414_pp0_iter35_reg;
        m_1_reg_414_pp0_iter3_reg <= m_1_reg_414_pp0_iter2_reg;
        m_1_reg_414_pp0_iter4_reg <= m_1_reg_414_pp0_iter3_reg;
        m_1_reg_414_pp0_iter5_reg <= m_1_reg_414_pp0_iter4_reg;
        m_1_reg_414_pp0_iter6_reg <= m_1_reg_414_pp0_iter5_reg;
        m_1_reg_414_pp0_iter7_reg <= m_1_reg_414_pp0_iter6_reg;
        m_1_reg_414_pp0_iter8_reg <= m_1_reg_414_pp0_iter7_reg;
        m_1_reg_414_pp0_iter9_reg <= m_1_reg_414_pp0_iter8_reg;
        select_ln595_reg_479 <= select_ln595_fu_250_p3;
        tmp_1_reg_469 <= {{bitcast_ln724_fu_200_p1[62:52]}};
        tmp_2_reg_453_pp0_iter33_reg <= tmp_2_reg_453;
        tmp_2_reg_453_pp0_iter34_reg <= tmp_2_reg_453_pp0_iter33_reg;
        tmp_2_reg_453_pp0_iter35_reg <= tmp_2_reg_453_pp0_iter34_reg;
        tmp_reg_464 <= bitcast_ln724_fu_200_p1[32'd63];
        trunc_ln595_1_reg_474 <= trunc_ln595_1_fu_226_p1;
        trunc_ln595_reg_459 <= trunc_ln595_fu_204_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln585_reg_419 <= icmp_ln585_fu_169_p2;
        icmp_ln585_reg_419_pp0_iter1_reg <= icmp_ln585_reg_419;
        m_1_reg_414 <= ap_sig_allocacmp_m_1;
        m_1_reg_414_pp0_iter1_reg <= m_1_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln595_fu_257_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln595_1_reg_490 <= icmp_ln595_1_fu_278_p2;
        icmp_ln595_2_reg_501 <= icmp_ln595_2_fu_304_p2;
        select_ln595_1_reg_494 <= select_ln595_1_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln585_fu_169_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        jsq_reg_423 <= jsq_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln595_2_reg_501 == 1'd0) & (icmp_ln595_1_reg_490 == 1'd1) & (icmp_ln595_reg_486 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln595_2_reg_511 <= select_ln595_2_fu_386_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln595_2_reg_501 == 1'd0) & (icmp_ln595_1_reg_490 == 1'd0) & (icmp_ln595_reg_486 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln595_3_reg_505 <= select_ln595_3_fu_341_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln585_reg_419_pp0_iter31_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_453 <= grp_xFBilateralFloatMul_fu_144_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln585_reg_419_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_8_reg_438 <= grp_xFBilateralFloatMul_fu_130_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln585_reg_419_pp0_iter15_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_9_reg_443 <= grp_xFBilateralFloatMul_fu_137_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln585_reg_419_pp0_iter26_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_s_reg_448 <= grp_xFBilateralExpf_fu_150_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln595_2_reg_501 == 1'd1) & (icmp_ln595_reg_486 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln595_2_reg_517 <= trunc_ln595_2_fu_394_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln585_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter36_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) 
    & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_m_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_m_1 = m_fu_92;
    end
end

always @ (*) begin
    if ((((icmp_ln595_reg_486_pp0_iter36_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd0) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)))) begin
        exp_lut_sigma_color_1_ce0 = 1'b1;
    end else begin
        exp_lut_sigma_color_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        if ((icmp_ln595_reg_486_pp0_iter36_reg == 1'd1)) begin
            exp_lut_sigma_color_1_d0 = 16'd0;
        end else if (((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0))) begin
            exp_lut_sigma_color_1_d0 = trunc_ln595_2_reg_517;
        end else if ((1'b1 == ap_condition_515)) begin
            exp_lut_sigma_color_1_d0 = select_ln595_2_reg_511;
        end else if ((1'b1 == ap_condition_511)) begin
            exp_lut_sigma_color_1_d0 = select_ln595_3_reg_505;
        end else begin
            exp_lut_sigma_color_1_d0 = 'bx;
        end
    end else begin
        exp_lut_sigma_color_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln595_reg_486_pp0_iter36_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd0) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)))) begin
        exp_lut_sigma_color_1_we0 = 1'b1;
    end else begin
        exp_lut_sigma_color_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln595_reg_486_pp0_iter36_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd0) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)))) begin
        exp_lut_sigma_color_ce0 = 1'b1;
    end else begin
        exp_lut_sigma_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        if ((icmp_ln595_reg_486_pp0_iter36_reg == 1'd1)) begin
            exp_lut_sigma_color_d0 = 16'd0;
        end else if (((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0))) begin
            exp_lut_sigma_color_d0 = trunc_ln595_2_reg_517;
        end else if ((1'b1 == ap_condition_515)) begin
            exp_lut_sigma_color_d0 = select_ln595_2_reg_511;
        end else if ((1'b1 == ap_condition_511)) begin
            exp_lut_sigma_color_d0 = select_ln595_3_reg_505;
        end else begin
            exp_lut_sigma_color_d0 = 'bx;
        end
    end else begin
        exp_lut_sigma_color_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln595_reg_486_pp0_iter36_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)) | ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd0) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1)))) begin
        exp_lut_sigma_color_we0 = 1'b1;
    end else begin
        exp_lut_sigma_color_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln595_fu_284_p2 = ($signed(sub_ln595_1_fu_262_p2) + $signed(12'd4081));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_511 = ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd0) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0));
end

always @ (*) begin
    ap_condition_515 = ((icmp_ln595_2_reg_501_pp0_iter36_reg == 1'd0) & (icmp_ln595_1_reg_490_pp0_iter36_reg == 1'd1) & (icmp_ln595_reg_486_pp0_iter36_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln595_fu_358_p2 = $signed(select_ln595_reg_479) >>> zext_ln595_2_fu_354_p1;

assign bitcast_ln724_1_fu_367_p1 = tmp_2_reg_453_pp0_iter35_reg;

assign bitcast_ln724_fu_200_p1 = grp_fu_606_p_dout0;

assign exp_lut_sigma_color_1_address0 = m_cast_fu_397_p1;

assign exp_lut_sigma_color_address0 = m_cast_fu_397_p1;

assign grp_fu_155_p0 = jsq_reg_423;

assign grp_fu_606_p_ce = 1'b1;

assign grp_fu_606_p_din0 = tmp_2_reg_453;

assign grp_xFBilateralExpf_fu_150_p_din1 = tmp_9_reg_443;

assign icmp_ln585_fu_169_p2 = ((ap_sig_allocacmp_m_1 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln595_1_fu_278_p2 = (($signed(tmp_3_fu_268_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln595_2_fu_304_p2 = ((sub_ln595_1_fu_262_p2 == 12'd15) ? 1'b1 : 1'b0);

assign icmp_ln595_3_fu_349_p2 = ((select_ln595_1_reg_494 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln595_4_fu_325_p2 = ((tmp_5_fu_316_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln595_fu_257_p2 = ((trunc_ln595_reg_459 == 63'd0) ? 1'b1 : 1'b0);

assign jsq_fu_185_p0 = zext_ln586_fu_181_p1;

assign jsq_fu_185_p1 = zext_ln586_fu_181_p1;

assign m_2_fu_175_p2 = (ap_sig_allocacmp_m_1 + 10'd1);

assign m_cast_fu_397_p1 = m_1_reg_414_pp0_iter36_reg;

assign select_ln595_1_fu_296_p3 = ((icmp_ln595_1_fu_278_p2[0:0] == 1'b1) ? add_ln595_fu_284_p2 : sub_ln595_2_fu_290_p2);

assign select_ln595_2_fu_386_p3 = ((icmp_ln595_3_fu_349_p2[0:0] == 1'b1) ? trunc_ln595_3_fu_363_p1 : select_ln595_4_fu_378_p3);

assign select_ln595_3_fu_341_p3 = ((icmp_ln595_4_fu_325_p2[0:0] == 1'b1) ? shl_ln595_fu_335_p2 : 16'd0);

assign select_ln595_4_fu_378_p3 = ((tmp_4_fu_370_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln595_fu_250_p3 = ((tmp_reg_464[0:0] == 1'b1) ? sub_ln595_fu_244_p2 : zext_ln595_1_fu_240_p1);

assign sext_ln595_fu_310_p1 = select_ln595_1_reg_494;

assign sext_ln595cast_fu_331_p1 = sext_ln595_fu_310_p1[15:0];

assign shl_ln595_fu_335_p2 = trunc_ln595_4_fu_313_p1 << sext_ln595cast_fu_331_p1;

assign sub_ln595_1_fu_262_p2 = (12'd1075 - zext_ln595_fu_230_p1);

assign sub_ln595_2_fu_290_p2 = (12'd15 - sub_ln595_1_fu_262_p2);

assign sub_ln595_fu_244_p2 = (54'd0 - zext_ln595_1_fu_240_p1);

assign tmp_3_fu_268_p4 = {{sub_ln595_1_fu_262_p2[11:4]}};

assign tmp_4_fu_370_p3 = bitcast_ln724_1_fu_367_p1[32'd31];

assign tmp_5_fu_316_p4 = {{select_ln595_1_reg_494[11:4]}};

assign trunc_ln595_1_fu_226_p1 = bitcast_ln724_fu_200_p1[51:0];

assign trunc_ln595_2_fu_394_p1 = select_ln595_reg_479[15:0];

assign trunc_ln595_3_fu_363_p1 = ashr_ln595_fu_358_p2[15:0];

assign trunc_ln595_4_fu_313_p1 = select_ln595_reg_479[15:0];

assign trunc_ln595_fu_204_p1 = bitcast_ln724_fu_200_p1[62:0];

assign zext_ln586_fu_181_p1 = ap_sig_allocacmp_m_1;

assign zext_ln595_1_cast_fu_233_p3 = {{1'd1}, {trunc_ln595_1_reg_474}};

assign zext_ln595_1_fu_240_p1 = zext_ln595_1_cast_fu_233_p3;

assign zext_ln595_2_fu_354_p1 = $unsigned(sext_ln595_fu_310_p1);

assign zext_ln595_fu_230_p1 = tmp_1_reg_469;

endmodule //bilateral_filter_accel_xFbilateralFilterKernel_Pipeline_VITIS_LOOP_585_6
