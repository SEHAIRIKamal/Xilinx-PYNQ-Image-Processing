// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_accel_xFGradientY3x3_16_0_s (
        ap_clk,
        ap_rst,
        t0_val,
        t1_val,
        t2_val,
        b0_val,
        b1_val,
        b2_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] t0_val;
input  [14:0] t1_val;
input  [7:0] t2_val;
input  [15:0] b0_val;
input  [14:0] b1_val;
input  [7:0] b2_val;
output  [7:0] ap_return;
input   ap_ce;

reg[7:0] ap_return;

reg   [7:0] b2_val_read_reg_202;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [14:0] b1_val_read_reg_208;
wire   [15:0] out_pix_2_fu_98_p2;
reg   [15:0] out_pix_2_reg_213;
wire   [6:0] trunc_ln110_fu_104_p1;
reg   [6:0] trunc_ln110_reg_218;
wire   [7:0] trunc_ln110_1_fu_108_p1;
reg   [7:0] trunc_ln110_1_reg_223;
wire    ap_block_pp0_stage0;
wire   [15:0] zext_ln110_fu_82_p1;
wire   [15:0] add_ln109_1_fu_86_p2;
wire   [15:0] M00_fu_74_p3;
wire   [15:0] add_ln109_fu_92_p2;
wire   [15:0] M01_fu_112_p3;
wire   [15:0] zext_ln109_fu_119_p1;
wire   [15:0] add_ln115_fu_129_p2;
wire   [7:0] trunc_ln_fu_122_p3;
wire   [7:0] add_ln117_1_fu_140_p2;
wire   [15:0] out_pix_fu_135_p2;
wire   [7:0] tmp_9_fu_158_p4;
wire   [0:0] tmp_fu_150_p3;
wire   [0:0] xor_ln120_fu_174_p2;
wire   [0:0] icmp_ln122_fu_168_p2;
wire   [0:0] or_ln120_fu_188_p2;
wire   [7:0] select_ln120_fu_180_p3;
wire   [7:0] add_ln117_fu_145_p2;
wire   [7:0] select_ln120_1_fu_194_p3;
reg    ap_ce_reg;
reg   [7:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln120_1_fu_194_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        b1_val_read_reg_208 <= b1_val;
        b2_val_read_reg_202 <= b2_val;
        out_pix_2_reg_213 <= out_pix_2_fu_98_p2;
        trunc_ln110_1_reg_223 <= trunc_ln110_1_fu_108_p1;
        trunc_ln110_reg_218 <= trunc_ln110_fu_104_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln120_1_fu_194_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign M00_fu_74_p3 = {{t1_val}, {1'd0}};

assign M01_fu_112_p3 = {{b1_val_read_reg_208}, {1'd0}};

assign add_ln109_1_fu_86_p2 = (zext_ln110_fu_82_p1 + t0_val);

assign add_ln109_fu_92_p2 = (add_ln109_1_fu_86_p2 + M00_fu_74_p3);

assign add_ln115_fu_129_p2 = (M01_fu_112_p3 + zext_ln109_fu_119_p1);

assign add_ln117_1_fu_140_p2 = (trunc_ln_fu_122_p3 + b2_val_read_reg_202);

assign add_ln117_fu_145_p2 = (add_ln117_1_fu_140_p2 + trunc_ln110_1_reg_223);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign icmp_ln122_fu_168_p2 = (($signed(tmp_9_fu_158_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign or_ln120_fu_188_p2 = (tmp_fu_150_p3 | icmp_ln122_fu_168_p2);

assign out_pix_2_fu_98_p2 = (b0_val - add_ln109_fu_92_p2);

assign out_pix_fu_135_p2 = (add_ln115_fu_129_p2 + out_pix_2_reg_213);

assign select_ln120_1_fu_194_p3 = ((or_ln120_fu_188_p2[0:0] == 1'b1) ? select_ln120_fu_180_p3 : add_ln117_fu_145_p2);

assign select_ln120_fu_180_p3 = ((xor_ln120_fu_174_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign tmp_9_fu_158_p4 = {{out_pix_fu_135_p2[15:8]}};

assign tmp_fu_150_p3 = out_pix_fu_135_p2[32'd15];

assign trunc_ln110_1_fu_108_p1 = out_pix_2_fu_98_p2[7:0];

assign trunc_ln110_fu_104_p1 = b1_val[6:0];

assign trunc_ln_fu_122_p3 = {{trunc_ln110_reg_218}, {1'd0}};

assign xor_ln120_fu_174_p2 = (tmp_fu_150_p3 ^ 1'd1);

assign zext_ln109_fu_119_p1 = b2_val_read_reg_202;

assign zext_ln110_fu_82_p1 = t2_val;

endmodule //sobel_accel_xFGradientY3x3_16_0_s
