// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_accel_xFGradientX3x3_16_0_s (
        ap_clk,
        ap_rst,
        t0_val,
        t2_val,
        m0_val,
        m2_val,
        b0_val,
        b2_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] t0_val;
input  [7:0] t2_val;
input  [14:0] m0_val;
input  [7:0] m2_val;
input  [15:0] b0_val;
input  [7:0] b2_val;
output  [7:0] ap_return;
input   ap_ce;

reg[7:0] ap_return;

reg   [7:0] b2_val_read_reg_206;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] m2_val_read_reg_212;
wire   [15:0] out_pix_6_fu_100_p2;
reg   [15:0] out_pix_6_reg_218;
wire   [7:0] trunc_ln62_fu_106_p1;
reg   [7:0] trunc_ln62_reg_223;
wire    ap_block_pp0_stage0;
wire   [15:0] zext_ln61_fu_84_p1;
wire   [15:0] out_pix_5_fu_88_p2;
wire   [15:0] M00_fu_76_p3;
wire   [15:0] A00_fu_94_p2;
wire   [8:0] M01_fu_110_p3;
wire   [9:0] zext_ln60_fu_117_p1;
wire   [9:0] zext_ln61_1_fu_121_p1;
wire   [9:0] add_ln67_fu_129_p2;
wire   [15:0] zext_ln67_fu_135_p1;
wire   [7:0] shl_ln62_fu_124_p2;
wire   [7:0] add_ln69_1_fu_144_p2;
wire   [15:0] out_pix_fu_139_p2;
wire   [7:0] tmp_10_fu_162_p4;
wire   [0:0] tmp_fu_154_p3;
wire   [0:0] xor_ln72_fu_178_p2;
wire   [0:0] icmp_ln74_fu_172_p2;
wire   [0:0] or_ln72_fu_192_p2;
wire   [7:0] select_ln72_fu_184_p3;
wire   [7:0] add_ln69_fu_149_p2;
wire   [7:0] select_ln72_1_fu_198_p3;
reg    ap_ce_reg;
reg   [7:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln72_1_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        b2_val_read_reg_206 <= b2_val;
        m2_val_read_reg_212 <= m2_val;
        out_pix_6_reg_218 <= out_pix_6_fu_100_p2;
        trunc_ln62_reg_223 <= trunc_ln62_fu_106_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln72_1_fu_198_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign A00_fu_94_p2 = (out_pix_5_fu_88_p2 - M00_fu_76_p3);

assign M00_fu_76_p3 = {{m0_val}, {1'd0}};

assign M01_fu_110_p3 = {{m2_val_read_reg_212}, {1'd0}};

assign add_ln67_fu_129_p2 = (zext_ln60_fu_117_p1 + zext_ln61_1_fu_121_p1);

assign add_ln69_1_fu_144_p2 = (shl_ln62_fu_124_p2 + b2_val_read_reg_206);

assign add_ln69_fu_149_p2 = (add_ln69_1_fu_144_p2 + trunc_ln62_reg_223);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign icmp_ln74_fu_172_p2 = (($signed(tmp_10_fu_162_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign or_ln72_fu_192_p2 = (tmp_fu_154_p3 | icmp_ln74_fu_172_p2);

assign out_pix_5_fu_88_p2 = (zext_ln61_fu_84_p1 - t0_val);

assign out_pix_6_fu_100_p2 = (A00_fu_94_p2 - b0_val);

assign out_pix_fu_139_p2 = (zext_ln67_fu_135_p1 + out_pix_6_reg_218);

assign select_ln72_1_fu_198_p3 = ((or_ln72_fu_192_p2[0:0] == 1'b1) ? select_ln72_fu_184_p3 : add_ln69_fu_149_p2);

assign select_ln72_fu_184_p3 = ((xor_ln72_fu_178_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign shl_ln62_fu_124_p2 = m2_val_read_reg_212 << 8'd1;

assign tmp_10_fu_162_p4 = {{out_pix_fu_139_p2[15:8]}};

assign tmp_fu_154_p3 = out_pix_fu_139_p2[32'd15];

assign trunc_ln62_fu_106_p1 = out_pix_6_fu_100_p2[7:0];

assign xor_ln72_fu_178_p2 = (tmp_fu_154_p3 ^ 1'd1);

assign zext_ln60_fu_117_p1 = M01_fu_110_p3;

assign zext_ln61_1_fu_121_p1 = b2_val_read_reg_206;

assign zext_ln61_fu_84_p1 = t2_val;

assign zext_ln67_fu_135_p1 = add_ln67_fu_129_p2;

endmodule //sobel_accel_xFGradientX3x3_16_0_s
