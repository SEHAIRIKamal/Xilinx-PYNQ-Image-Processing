// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_accel_accumulateWeighted_0_2_2160_3840_1_2_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_dstgx_data_dout,
        p_dstgx_data_num_data_valid,
        p_dstgx_data_fifo_cap,
        p_dstgx_data_empty_n,
        p_dstgx_data_read,
        p_dstgy_data_dout,
        p_dstgy_data_num_data_valid,
        p_dstgy_data_fifo_cap,
        p_dstgy_data_empty_n,
        p_dstgy_data_read,
        p_dst_data_din,
        p_dst_data_num_data_valid,
        p_dst_data_fifo_cap,
        p_dst_data_full_n,
        p_dst_data_write,
        alpha_dout,
        alpha_num_data_valid,
        alpha_fifo_cap,
        alpha_empty_n,
        alpha_read
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] p_dstgx_data_dout;
input  [1:0] p_dstgx_data_num_data_valid;
input  [1:0] p_dstgx_data_fifo_cap;
input   p_dstgx_data_empty_n;
output   p_dstgx_data_read;
input  [7:0] p_dstgy_data_dout;
input  [1:0] p_dstgy_data_num_data_valid;
input  [1:0] p_dstgy_data_fifo_cap;
input   p_dstgy_data_empty_n;
output   p_dstgy_data_read;
output  [15:0] p_dst_data_din;
input  [1:0] p_dst_data_num_data_valid;
input  [1:0] p_dst_data_fifo_cap;
input   p_dst_data_full_n;
output   p_dst_data_write;
input  [31:0] alpha_dout;
input  [3:0] alpha_num_data_valid;
input  [3:0] alpha_fifo_cap;
input   alpha_empty_n;
output   alpha_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_dstgx_data_read;
reg p_dstgy_data_read;
reg p_dst_data_write;
reg alpha_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    alpha_blk_n;
reg   [31:0] alpha_read_reg_374;
reg    ap_block_state1;
wire   [31:0] grp_fu_123_p2;
reg   [31:0] val_reg_379;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_reg_384;
wire    ap_CS_fsm_state6;
wire   [22:0] trunc_ln295_1_fu_162_p1;
reg   [22:0] trunc_ln295_1_reg_389;
wire   [0:0] icmp_ln295_fu_166_p2;
reg   [0:0] icmp_ln295_reg_394;
wire  signed [8:0] sub_ln295_fu_172_p2;
reg  signed [8:0] sub_ln295_reg_400;
wire   [6:0] trunc_ln295_2_fu_178_p1;
reg   [6:0] trunc_ln295_2_reg_407;
wire   [0:0] icmp_ln295_1_fu_182_p2;
reg   [0:0] icmp_ln295_1_reg_412;
wire   [23:0] temp_3_fu_305_p3;
reg   [23:0] temp_3_reg_418;
wire    ap_CS_fsm_state7;
wire   [15:0] trunc_ln119_fu_313_p1;
reg   [15:0] trunc_ln119_reg_424;
wire    ap_CS_fsm_state8;
wire   [23:0] temp_5_fu_322_p3;
reg   [23:0] temp_5_reg_429;
wire   [23:0] temp1_fu_334_p2;
reg   [23:0] temp1_reg_434;
wire   [15:0] empty_fu_340_p1;
reg   [15:0] empty_reg_439;
wire    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start;
wire    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_done;
wire    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_idle;
wire    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_ready;
wire    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dstgx_data_read;
wire    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dstgy_data_read;
wire   [15:0] grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dst_data_din;
wire    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dst_data_write;
reg    grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln58_fu_351_p2;
wire    ap_CS_fsm_state10;
reg   [12:0] i_fu_88;
wire   [12:0] i_8_fu_356_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] bitcast_ln733_fu_133_p1;
wire   [7:0] tmp5_fu_148_p4;
wire   [30:0] trunc_ln295_fu_136_p1;
wire   [8:0] zext_ln295_fu_158_p1;
wire   [6:0] sub_ln295_1_fu_208_p2;
wire  signed [31:0] sext_ln295_fu_195_p1;
wire   [23:0] temp_fu_188_p3;
wire   [23:0] sext_ln295cast_fu_219_p1;
wire   [23:0] sub_ln295_1cast_fu_229_p1;
wire   [0:0] xor_ln295_fu_239_p2;
wire   [0:0] and_ln295_fu_244_p2;
wire   [0:0] or_ln295_fu_257_p2;
wire   [0:0] icmp_ln295_3_fu_203_p2;
wire   [0:0] xor_ln295_1_fu_261_p2;
wire   [0:0] and_ln295_1_fu_267_p2;
wire   [0:0] icmp_ln295_2_fu_198_p2;
wire   [0:0] and_ln295_2_fu_273_p2;
wire   [23:0] temp_1_fu_223_p2;
wire   [23:0] select_ln295_fu_249_p3;
wire   [0:0] or_ln295_1_fu_287_p2;
wire   [0:0] icmp_ln295_4_fu_213_p2;
wire   [0:0] xor_ln295_2_fu_293_p2;
wire   [0:0] and_ln295_3_fu_299_p2;
wire   [23:0] shl_ln295_fu_233_p2;
wire   [23:0] select_ln295_1_fu_279_p3;
wire   [23:0] temp_4_fu_317_p2;
wire   [23:0] temp_i_1_neg_fu_328_p2;
wire   [15:0] zext_ln58_fu_347_p1;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start_reg = 1'b0;
end

sobel_accel_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start),
    .ap_done(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_done),
    .ap_idle(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_idle),
    .ap_ready(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_ready),
    .p_dstgx_data_dout(p_dstgx_data_dout),
    .p_dstgx_data_num_data_valid(2'd0),
    .p_dstgx_data_fifo_cap(2'd0),
    .p_dstgx_data_empty_n(p_dstgx_data_empty_n),
    .p_dstgx_data_read(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dstgx_data_read),
    .p_dstgy_data_dout(p_dstgy_data_dout),
    .p_dstgy_data_num_data_valid(2'd0),
    .p_dstgy_data_fifo_cap(2'd0),
    .p_dstgy_data_empty_n(p_dstgy_data_empty_n),
    .p_dstgy_data_read(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dstgy_data_read),
    .p_dst_data_din(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dst_data_din),
    .p_dst_data_num_data_valid(2'd0),
    .p_dst_data_fifo_cap(2'd0),
    .p_dst_data_full_n(p_dst_data_full_n),
    .p_dst_data_write(grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dst_data_write),
    .empty(empty_reg_439),
    .conv3_i12_i193_i(temp_5_reg_429),
    .conv3_i12_i166_i(temp1_reg_434)
);

sobel_accel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha_read_reg_374),
    .din1(32'd1258291198),
    .ce(1'b1),
    .dout(grp_fu_123_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln58_fu_351_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln58_fu_351_p2 == 1'd1))) begin
            grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_ready == 1'b1)) begin
            grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_88 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln58_fu_351_p2 == 1'd1))) begin
        i_fu_88 <= i_8_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_read_reg_374 <= alpha_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_reg_439 <= empty_fu_340_p1;
        temp1_reg_434 <= temp1_fu_334_p2;
        temp_5_reg_429 <= temp_5_fu_322_p3;
        trunc_ln119_reg_424 <= trunc_ln119_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln295_1_reg_412 <= icmp_ln295_1_fu_182_p2;
        icmp_ln295_reg_394 <= icmp_ln295_fu_166_p2;
        sub_ln295_reg_400 <= sub_ln295_fu_172_p2;
        tmp_reg_384 <= bitcast_ln733_fu_133_p1[32'd31];
        trunc_ln295_1_reg_389 <= trunc_ln295_1_fu_162_p1;
        trunc_ln295_2_reg_407 <= trunc_ln295_2_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_reg_418 <= temp_3_fu_305_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        val_reg_379 <= grp_fu_123_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_blk_n = alpha_empty_n;
    end else begin
        alpha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_read = 1'b1;
    end else begin
        alpha_read = 1'b0;
    end
end

always @ (*) begin
    if ((grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln58_fu_351_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln58_fu_351_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_dst_data_write = grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dst_data_write;
    end else begin
        p_dst_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_dstgx_data_read = grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dstgx_data_read;
    end else begin
        p_dstgx_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_dstgy_data_read = grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dstgy_data_read;
    end else begin
        p_dstgy_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln58_fu_351_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln295_1_fu_267_p2 = (xor_ln295_1_fu_261_p2 & icmp_ln295_3_fu_203_p2);

assign and_ln295_2_fu_273_p2 = (icmp_ln295_2_fu_198_p2 & and_ln295_1_fu_267_p2);

assign and_ln295_3_fu_299_p2 = (xor_ln295_2_fu_293_p2 & icmp_ln295_4_fu_213_p2);

assign and_ln295_fu_244_p2 = (xor_ln295_fu_239_p2 & icmp_ln295_1_reg_412);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bitcast_ln733_fu_133_p1 = val_reg_379;

assign empty_fu_340_p1 = p_read1[15:0];

assign grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start = grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_ap_start_reg;

assign i_8_fu_356_p2 = (i_fu_88 + 13'd1);

assign icmp_ln295_1_fu_182_p2 = ((tmp5_fu_148_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln295_2_fu_198_p2 = (($signed(sub_ln295_reg_400) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln295_3_fu_203_p2 = (($signed(sub_ln295_reg_400) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_4_fu_213_p2 = ((sub_ln295_1_fu_208_p2 < 7'd24) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_166_p2 = ((trunc_ln295_fu_136_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_351_p2 = ((zext_ln58_fu_347_p1 < trunc_ln119_reg_424) ? 1'b1 : 1'b0);

assign or_ln295_1_fu_287_p2 = (or_ln295_fu_257_p2 | icmp_ln295_2_fu_198_p2);

assign or_ln295_fu_257_p2 = (icmp_ln295_reg_394 | icmp_ln295_1_reg_412);

assign p_dst_data_din = grp_accumulateWeighted_0_2_2160_3840_1_2_2_2_Pipeline_ColLoop_fu_110_p_dst_data_din;

assign select_ln295_1_fu_279_p3 = ((and_ln295_2_fu_273_p2[0:0] == 1'b1) ? temp_1_fu_223_p2 : select_ln295_fu_249_p3);

assign select_ln295_fu_249_p3 = ((and_ln295_fu_244_p2[0:0] == 1'b1) ? temp_fu_188_p3 : 24'd0);

assign sext_ln295_fu_195_p1 = sub_ln295_reg_400;

assign sext_ln295cast_fu_219_p1 = sext_ln295_fu_195_p1[23:0];

assign shl_ln295_fu_233_p2 = temp_fu_188_p3 << sub_ln295_1cast_fu_229_p1;

assign sub_ln295_1_fu_208_p2 = (7'd0 - trunc_ln295_2_reg_407);

assign sub_ln295_1cast_fu_229_p1 = sub_ln295_1_fu_208_p2;

assign sub_ln295_fu_172_p2 = (9'd150 - zext_ln295_fu_158_p1);

assign temp1_fu_334_p2 = (temp_i_1_neg_fu_328_p2 ^ 24'd8388608);

assign temp_1_fu_223_p2 = temp_fu_188_p3 >> sext_ln295cast_fu_219_p1;

assign temp_3_fu_305_p3 = ((and_ln295_3_fu_299_p2[0:0] == 1'b1) ? shl_ln295_fu_233_p2 : select_ln295_1_fu_279_p3);

assign temp_4_fu_317_p2 = (24'd0 - temp_3_reg_418);

assign temp_5_fu_322_p3 = ((tmp_reg_384[0:0] == 1'b1) ? temp_4_fu_317_p2 : temp_3_reg_418);

assign temp_fu_188_p3 = {{1'd1}, {trunc_ln295_1_reg_389}};

assign temp_i_1_neg_fu_328_p2 = (24'd0 - temp_5_fu_322_p3);

assign tmp5_fu_148_p4 = {{bitcast_ln733_fu_133_p1[30:23]}};

assign trunc_ln119_fu_313_p1 = p_read[15:0];

assign trunc_ln295_1_fu_162_p1 = bitcast_ln733_fu_133_p1[22:0];

assign trunc_ln295_2_fu_178_p1 = sub_ln295_fu_172_p2[6:0];

assign trunc_ln295_fu_136_p1 = bitcast_ln733_fu_133_p1[30:0];

assign xor_ln295_1_fu_261_p2 = (or_ln295_fu_257_p2 ^ 1'd1);

assign xor_ln295_2_fu_293_p2 = (or_ln295_1_fu_287_p2 ^ 1'd1);

assign xor_ln295_fu_239_p2 = (icmp_ln295_reg_394 ^ 1'd1);

assign zext_ln295_fu_158_p1 = tmp5_fu_148_p4;

assign zext_ln58_fu_347_p1 = i_fu_88;

endmodule //sobel_accel_accumulateWeighted_0_2_2160_3840_1_2_2_2_s
