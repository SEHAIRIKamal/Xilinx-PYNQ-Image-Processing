// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fast_accel_xFfastnms_0_3840_2160_0_1_2_2_1_2161_3_9_4_Pipeline_Col_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_dst_data_dout,
        p_dst_data_num_data_valid,
        p_dst_data_fifo_cap,
        p_dst_data_empty_n,
        p_dst_data_read,
        imgOutput_data_din,
        imgOutput_data_num_data_valid,
        imgOutput_data_fifo_cap,
        imgOutput_data_full_n,
        imgOutput_data_write,
        img_width_load,
        buf_2_address0,
        buf_2_ce0,
        buf_2_q0,
        buf_2_address1,
        buf_2_ce1,
        buf_2_we1,
        buf_2_d1,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_q0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        row_ind_9,
        row_ind_8,
        row_ind_7,
        sub_i214_i_cast,
        spec_select51,
        spec_select55,
        spec_select59,
        cmp_i_i322_i
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_dst_data_dout;
input  [1:0] p_dst_data_num_data_valid;
input  [1:0] p_dst_data_fifo_cap;
input   p_dst_data_empty_n;
output   p_dst_data_read;
output  [7:0] imgOutput_data_din;
input  [1:0] imgOutput_data_num_data_valid;
input  [1:0] imgOutput_data_fifo_cap;
input   imgOutput_data_full_n;
output   imgOutput_data_write;
input  [15:0] img_width_load;
output  [11:0] buf_2_address0;
output   buf_2_ce0;
input  [7:0] buf_2_q0;
output  [11:0] buf_2_address1;
output   buf_2_ce1;
output   buf_2_we1;
output  [7:0] buf_2_d1;
output  [11:0] buf_r_address0;
output   buf_r_ce0;
input  [7:0] buf_r_q0;
output  [11:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [7:0] buf_r_d1;
output  [11:0] buf_1_address0;
output   buf_1_ce0;
input  [7:0] buf_1_q0;
output  [11:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [7:0] buf_1_d1;
input  [1:0] row_ind_9;
input  [1:0] row_ind_8;
input  [1:0] row_ind_7;
input  [1:0] sub_i214_i_cast;
input  [0:0] spec_select51;
input  [0:0] spec_select55;
input  [0:0] spec_select59;
input  [0:0] cmp_i_i322_i;

reg ap_idle;
reg p_dst_data_read;
reg imgOutput_data_write;
reg buf_2_ce0;
reg buf_2_ce1;
reg buf_2_we1;
reg buf_r_ce0;
reg buf_r_ce1;
reg buf_r_we1;
reg buf_1_ce0;
reg buf_1_ce1;
reg buf_1_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln660_reg_710;
reg   [0:0] and_ln666_reg_721;
reg    ap_predicate_op51_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln660_reg_710_pp0_iter4_reg;
reg   [0:0] icmp_ln808_reg_740;
reg   [0:0] icmp_ln808_reg_740_pp0_iter4_reg;
reg    ap_predicate_op123_write_state6;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln660_fu_310_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    p_dst_data_blk_n;
wire    ap_block_pp0_stage0;
reg    imgOutput_data_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] row_ind_9_read_reg_697;
reg   [12:0] col_reg_703;
reg   [12:0] col_reg_703_pp0_iter1_reg;
reg   [0:0] icmp_ln660_reg_710_pp0_iter1_reg;
reg   [0:0] icmp_ln660_reg_710_pp0_iter2_reg;
reg   [0:0] icmp_ln660_reg_710_pp0_iter3_reg;
wire   [0:0] icmp_ln666_fu_322_p2;
reg   [0:0] icmp_ln666_reg_714;
reg   [0:0] icmp_ln666_reg_714_pp0_iter1_reg;
reg   [0:0] icmp_ln666_reg_714_pp0_iter2_reg;
reg   [0:0] icmp_ln666_reg_714_pp0_iter3_reg;
wire   [0:0] and_ln666_fu_328_p2;
wire   [0:0] icmp_ln808_fu_351_p2;
reg   [0:0] icmp_ln808_reg_740_pp0_iter3_reg;
reg   [7:0] buf_2_load_reg_746;
reg   [7:0] buf_load_reg_754;
reg   [7:0] buf_1_load_reg_762;
wire   [1:0] trunc_ln_fu_356_p5;
reg   [1:0] trunc_ln_reg_770;
wire   [0:0] icmp_ln590_fu_458_p2;
reg   [0:0] icmp_ln590_reg_775;
wire   [0:0] icmp_ln591_1_fu_482_p2;
reg   [0:0] icmp_ln591_1_reg_780;
wire   [0:0] icmp_ln592_fu_494_p2;
reg   [0:0] icmp_ln592_reg_785;
wire   [0:0] icmp_ln592_1_fu_500_p2;
reg   [0:0] icmp_ln592_1_reg_790;
wire   [0:0] and_ln588_6_fu_530_p2;
reg   [0:0] and_ln588_6_reg_795;
reg    ap_condition_exit_pp0_iter4_stage0;
reg   [7:0] ap_phi_mux_src_buf_12_phi_fu_262_p4;
wire   [7:0] ap_phi_reg_pp0_iter4_src_buf_12_reg_259;
wire   [7:0] src_buf_18_fu_450_p3;
wire   [63:0] zext_ln667_fu_339_p1;
wire   [63:0] conv_i131_i_fu_345_p1;
reg   [12:0] col_4_fu_86;
wire   [12:0] col_5_fu_316_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_col;
reg   [7:0] src_buf_fu_90;
reg   [7:0] src_buf_3_fu_94;
wire   [7:0] src_buf_19_fu_549_p3;
reg   [7:0] src_buf_4_fu_98;
wire   [7:0] src_buf_17_fu_443_p3;
reg   [7:0] src_buf_5_fu_102;
wire   [7:0] src_buf_20_fu_542_p3;
reg   [7:0] src_buf_2_fu_106;
wire   [7:0] src_buf_16_fu_436_p3;
reg   [7:0] src_buf_1_fu_110;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln660_fu_306_p1;
wire   [7:0] tmp_5_fu_383_p5;
wire   [7:0] tmp_6_fu_391_p5;
wire   [7:0] tmp_9_fu_406_p5;
wire   [7:0] tmp_1_fu_421_p5;
wire   [7:0] src_buf_8_fu_429_p3;
wire   [7:0] src_buf_7_fu_414_p3;
wire   [7:0] src_buf_6_fu_399_p3;
wire   [0:0] icmp_ln590_2_fu_470_p2;
wire   [0:0] icmp_ln590_1_fu_464_p2;
wire   [0:0] icmp_ln591_fu_476_p2;
wire   [0:0] icmp_ln588_fu_506_p2;
wire   [0:0] and_ln588_4_fu_518_p2;
wire   [0:0] icmp_ln591_2_fu_488_p2;
wire   [0:0] and_ln588_5_fu_524_p2;
wire   [0:0] and_ln588_3_fu_512_p2;
wire   [0:0] and_ln588_1_fu_590_p2;
wire   [0:0] and_ln588_fu_586_p2;
wire   [0:0] and_ln588_2_fu_594_p2;
wire   [0:0] pix_fu_600_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fast_accel_mux_3_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 2 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
mux_3_2_2_1_1_U135(
    .din0(row_ind_7),
    .din1(row_ind_8),
    .din2(row_ind_9),
    .din3(sub_i214_i_cast),
    .dout(trunc_ln_fu_356_p5)
);

fast_accel_mux_3_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_3_2_8_1_1_U136(
    .din0(buf_load_reg_754),
    .din1(buf_1_load_reg_762),
    .din2(buf_2_load_reg_746),
    .din3(trunc_ln_reg_770),
    .dout(tmp_5_fu_383_p5)
);

fast_accel_mux_3_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_3_2_8_1_1_U137(
    .din0(buf_load_reg_754),
    .din1(buf_1_load_reg_762),
    .din2(buf_2_load_reg_746),
    .din3(row_ind_7),
    .dout(tmp_6_fu_391_p5)
);

fast_accel_mux_3_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_3_2_8_1_1_U138(
    .din0(buf_load_reg_754),
    .din1(buf_1_load_reg_762),
    .din2(buf_2_load_reg_746),
    .din3(row_ind_8),
    .dout(tmp_9_fu_406_p5)
);

fast_accel_mux_3_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_3_2_8_1_1_U139(
    .din0(buf_load_reg_754),
    .din1(buf_1_load_reg_762),
    .din2(buf_2_load_reg_746),
    .din3(row_ind_9),
    .dout(tmp_1_fu_421_p5)
);

fast_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter4_stage0)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln660_fu_310_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_4_fu_86 <= col_5_fu_316_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_4_fu_86 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            src_buf_1_fu_110 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd0))) begin
            src_buf_1_fu_110 <= src_buf_18_fu_450_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            src_buf_2_fu_106 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd0))) begin
            src_buf_2_fu_106 <= src_buf_16_fu_436_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            src_buf_3_fu_94 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd0))) begin
            src_buf_3_fu_94 <= src_buf_19_fu_549_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            src_buf_4_fu_98 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd0))) begin
            src_buf_4_fu_98 <= src_buf_17_fu_443_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            src_buf_5_fu_102 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd0))) begin
            src_buf_5_fu_102 <= src_buf_20_fu_542_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            src_buf_fu_90 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd0))) begin
            src_buf_fu_90 <= ap_phi_mux_src_buf_12_phi_fu_262_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd0))) begin
        and_ln588_6_reg_795 <= and_ln588_6_fu_530_p2;
        icmp_ln590_reg_775 <= icmp_ln590_fu_458_p2;
        icmp_ln591_1_reg_780 <= icmp_ln591_1_fu_482_p2;
        icmp_ln592_1_reg_790 <= icmp_ln592_1_fu_500_p2;
        icmp_ln592_reg_785 <= icmp_ln592_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln660_fu_310_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln666_reg_721 <= and_ln666_fu_328_p2;
        icmp_ln666_reg_714 <= icmp_ln666_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        col_reg_703 <= ap_sig_allocacmp_col;
        col_reg_703_pp0_iter1_reg <= col_reg_703;
        icmp_ln660_reg_710 <= icmp_ln660_fu_310_p2;
        icmp_ln660_reg_710_pp0_iter1_reg <= icmp_ln660_reg_710;
        icmp_ln666_reg_714_pp0_iter1_reg <= icmp_ln666_reg_714;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln660_reg_710_pp0_iter2_reg <= icmp_ln660_reg_710_pp0_iter1_reg;
        icmp_ln660_reg_710_pp0_iter3_reg <= icmp_ln660_reg_710_pp0_iter2_reg;
        icmp_ln660_reg_710_pp0_iter4_reg <= icmp_ln660_reg_710_pp0_iter3_reg;
        icmp_ln666_reg_714_pp0_iter2_reg <= icmp_ln666_reg_714_pp0_iter1_reg;
        icmp_ln666_reg_714_pp0_iter3_reg <= icmp_ln666_reg_714_pp0_iter2_reg;
        icmp_ln808_reg_740_pp0_iter3_reg <= icmp_ln808_reg_740;
        icmp_ln808_reg_740_pp0_iter4_reg <= icmp_ln808_reg_740_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln660_reg_710_pp0_iter2_reg == 1'd0))) begin
        buf_1_load_reg_762 <= buf_1_q0;
        buf_2_load_reg_746 <= buf_2_q0;
        buf_load_reg_754 <= buf_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln660_reg_710_pp0_iter1_reg == 1'd0))) begin
        icmp_ln808_reg_740 <= icmp_ln808_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln660_reg_710_pp0_iter2_reg == 1'd0))) begin
        trunc_ln_reg_770 <= trunc_ln_fu_356_p5;
    end
end

always @ (*) begin
    if (((icmp_ln660_fu_310_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln660_reg_710_pp0_iter3_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln660_reg_710_pp0_iter3_reg == 1'd0)) begin
        if ((icmp_ln808_reg_740_pp0_iter3_reg == 1'd1)) begin
            ap_phi_mux_src_buf_12_phi_fu_262_p4 = src_buf_18_fu_450_p3;
        end else if ((icmp_ln808_reg_740_pp0_iter3_reg == 1'd0)) begin
            ap_phi_mux_src_buf_12_phi_fu_262_p4 = src_buf_1_fu_110;
        end else begin
            ap_phi_mux_src_buf_12_phi_fu_262_p4 = ap_phi_reg_pp0_iter4_src_buf_12_reg_259;
        end
    end else begin
        ap_phi_mux_src_buf_12_phi_fu_262_p4 = ap_phi_reg_pp0_iter4_src_buf_12_reg_259;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col = 13'd0;
    end else begin
        ap_sig_allocacmp_col = col_4_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln666_reg_721) & (icmp_ln660_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (row_ind_9_read_reg_697 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_1_we1 = 1'b1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_2_ce0 = 1'b1;
    end else begin
        buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_2_ce1 = 1'b1;
    end else begin
        buf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(row_ind_9_read_reg_697 == 2'd0) & ~(row_ind_9_read_reg_697 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln666_reg_721) & (icmp_ln660_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_2_we1 = 1'b1;
    end else begin
        buf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln666_reg_721) & (icmp_ln660_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (row_ind_9_read_reg_697 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_we1 = 1'b1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op123_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        imgOutput_data_blk_n = imgOutput_data_full_n;
    end else begin
        imgOutput_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op123_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        imgOutput_data_write = 1'b1;
    end else begin
        imgOutput_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op51_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_data_blk_n = p_dst_data_empty_n;
    end else begin
        p_dst_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op51_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_data_read = 1'b1;
    end else begin
        p_dst_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln588_1_fu_590_p2 = (icmp_ln592_reg_785 & icmp_ln591_1_reg_780);

assign and_ln588_2_fu_594_p2 = (and_ln588_fu_586_p2 & and_ln588_1_fu_590_p2);

assign and_ln588_3_fu_512_p2 = (icmp_ln590_2_fu_470_p2 & icmp_ln590_1_fu_464_p2);

assign and_ln588_4_fu_518_p2 = (icmp_ln591_fu_476_p2 & icmp_ln588_fu_506_p2);

assign and_ln588_5_fu_524_p2 = (icmp_ln591_2_fu_488_p2 & and_ln588_4_fu_518_p2);

assign and_ln588_6_fu_530_p2 = (and_ln588_5_fu_524_p2 & and_ln588_3_fu_512_p2);

assign and_ln588_fu_586_p2 = (icmp_ln592_1_reg_790 & icmp_ln590_reg_775);

assign and_ln666_fu_328_p2 = (icmp_ln666_fu_322_p2 & cmp_i_i322_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op123_write_state6 == 1'b1) & (imgOutput_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_predicate_op51_read_state2 == 1'b1) & (p_dst_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op123_write_state6 == 1'b1) & (imgOutput_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_predicate_op51_read_state2 == 1'b1) & (p_dst_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op123_write_state6 == 1'b1) & (imgOutput_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_predicate_op51_read_state2 == 1'b1) & (p_dst_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op51_read_state2 == 1'b1) & (p_dst_data_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((ap_predicate_op123_write_state6 == 1'b1) & (imgOutput_data_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter4_src_buf_12_reg_259 = 'bx;

always @ (*) begin
    ap_predicate_op123_write_state6 = ((icmp_ln808_reg_740_pp0_iter4_reg == 1'd0) & (icmp_ln660_reg_710_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op51_read_state2 = ((1'd1 == and_ln666_reg_721) & (icmp_ln660_reg_710 == 1'd0));
end

assign buf_1_address0 = conv_i131_i_fu_345_p1;

assign buf_1_address1 = zext_ln667_fu_339_p1;

assign buf_1_d1 = p_dst_data_dout;

assign buf_2_address0 = conv_i131_i_fu_345_p1;

assign buf_2_address1 = zext_ln667_fu_339_p1;

assign buf_2_d1 = p_dst_data_dout;

assign buf_r_address0 = conv_i131_i_fu_345_p1;

assign buf_r_address1 = zext_ln667_fu_339_p1;

assign buf_r_d1 = p_dst_data_dout;

assign col_5_fu_316_p2 = (ap_sig_allocacmp_col + 13'd1);

assign conv_i131_i_fu_345_p1 = col_reg_703_pp0_iter1_reg;

assign icmp_ln588_fu_506_p2 = ((src_buf_4_fu_98 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln590_1_fu_464_p2 = ((src_buf_4_fu_98 > src_buf_17_fu_443_p3) ? 1'b1 : 1'b0);

assign icmp_ln590_2_fu_470_p2 = ((src_buf_4_fu_98 > src_buf_fu_90) ? 1'b1 : 1'b0);

assign icmp_ln590_fu_458_p2 = ((src_buf_4_fu_98 > src_buf_3_fu_94) ? 1'b1 : 1'b0);

assign icmp_ln591_1_fu_482_p2 = ((src_buf_4_fu_98 > src_buf_18_fu_450_p3) ? 1'b1 : 1'b0);

assign icmp_ln591_2_fu_488_p2 = ((src_buf_4_fu_98 > src_buf_5_fu_102) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_476_p2 = ((src_buf_4_fu_98 > src_buf_1_fu_110) ? 1'b1 : 1'b0);

assign icmp_ln592_1_fu_500_p2 = ((src_buf_4_fu_98 > src_buf_16_fu_436_p3) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_494_p2 = ((src_buf_4_fu_98 > src_buf_2_fu_106) ? 1'b1 : 1'b0);

assign icmp_ln660_fu_310_p2 = ((zext_ln660_fu_306_p1 > img_width_load) ? 1'b1 : 1'b0);

assign icmp_ln666_fu_322_p2 = ((zext_ln660_fu_306_p1 < img_width_load) ? 1'b1 : 1'b0);

assign icmp_ln808_fu_351_p2 = ((col_reg_703_pp0_iter1_reg == 13'd0) ? 1'b1 : 1'b0);

assign imgOutput_data_din = ((pix_fu_600_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign pix_fu_600_p2 = (and_ln588_6_reg_795 & and_ln588_2_fu_594_p2);

assign row_ind_9_read_reg_697 = row_ind_9;

assign src_buf_16_fu_436_p3 = ((icmp_ln666_reg_714_pp0_iter3_reg[0:0] == 1'b1) ? src_buf_8_fu_429_p3 : src_buf_2_fu_106);

assign src_buf_17_fu_443_p3 = ((icmp_ln666_reg_714_pp0_iter3_reg[0:0] == 1'b1) ? src_buf_7_fu_414_p3 : src_buf_4_fu_98);

assign src_buf_18_fu_450_p3 = ((icmp_ln666_reg_714_pp0_iter3_reg[0:0] == 1'b1) ? src_buf_6_fu_399_p3 : src_buf_1_fu_110);

assign src_buf_19_fu_549_p3 = ((icmp_ln808_reg_740_pp0_iter3_reg[0:0] == 1'b1) ? src_buf_17_fu_443_p3 : src_buf_4_fu_98);

assign src_buf_20_fu_542_p3 = ((icmp_ln808_reg_740_pp0_iter3_reg[0:0] == 1'b1) ? src_buf_16_fu_436_p3 : src_buf_2_fu_106);

assign src_buf_6_fu_399_p3 = ((spec_select51[0:0] == 1'b1) ? tmp_5_fu_383_p5 : tmp_6_fu_391_p5);

assign src_buf_7_fu_414_p3 = ((spec_select55[0:0] == 1'b1) ? tmp_5_fu_383_p5 : tmp_9_fu_406_p5);

assign src_buf_8_fu_429_p3 = ((spec_select59[0:0] == 1'b1) ? tmp_5_fu_383_p5 : tmp_1_fu_421_p5);

assign zext_ln660_fu_306_p1 = ap_sig_allocacmp_col;

assign zext_ln667_fu_339_p1 = col_reg_703;

endmodule //fast_accel_xFfastnms_0_3840_2160_0_1_2_2_1_2161_3_9_4_Pipeline_Col_Loop
