// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cornerHarris_accel_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        gradx_mat_data_dout,
        gradx_mat_data_num_data_valid,
        gradx_mat_data_fifo_cap,
        gradx_mat_data_empty_n,
        gradx_mat_data_read,
        gradx1_mat_data_din,
        gradx1_mat_data_num_data_valid,
        gradx1_mat_data_fifo_cap,
        gradx1_mat_data_full_n,
        gradx1_mat_data_write,
        gradx2_mat_data_din,
        gradx2_mat_data_num_data_valid,
        gradx2_mat_data_fifo_cap,
        gradx2_mat_data_full_n,
        gradx2_mat_data_write,
        img_height_dout,
        img_height_num_data_valid,
        img_height_fifo_cap,
        img_height_empty_n,
        img_height_read,
        img_width_dout,
        img_width_num_data_valid,
        img_width_fifo_cap,
        img_width_empty_n,
        img_width_read,
        img_height_c29_din,
        img_height_c29_num_data_valid,
        img_height_c29_fifo_cap,
        img_height_c29_full_n,
        img_height_c29_write,
        img_height_c31_din,
        img_height_c31_num_data_valid,
        img_height_c31_fifo_cap,
        img_height_c31_full_n,
        img_height_c31_write,
        img_width_c36_din,
        img_width_c36_num_data_valid,
        img_width_c36_fifo_cap,
        img_width_c36_full_n,
        img_width_c36_write,
        img_width_c38_din,
        img_width_c38_num_data_valid,
        img_width_c38_fifo_cap,
        img_width_c38_full_n,
        img_width_c38_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] gradx_mat_data_dout;
input  [1:0] gradx_mat_data_num_data_valid;
input  [1:0] gradx_mat_data_fifo_cap;
input   gradx_mat_data_empty_n;
output   gradx_mat_data_read;
output  [15:0] gradx1_mat_data_din;
input  [1:0] gradx1_mat_data_num_data_valid;
input  [1:0] gradx1_mat_data_fifo_cap;
input   gradx1_mat_data_full_n;
output   gradx1_mat_data_write;
output  [15:0] gradx2_mat_data_din;
input  [1:0] gradx2_mat_data_num_data_valid;
input  [1:0] gradx2_mat_data_fifo_cap;
input   gradx2_mat_data_full_n;
output   gradx2_mat_data_write;
input  [15:0] img_height_dout;
input  [2:0] img_height_num_data_valid;
input  [2:0] img_height_fifo_cap;
input   img_height_empty_n;
output   img_height_read;
input  [15:0] img_width_dout;
input  [2:0] img_width_num_data_valid;
input  [2:0] img_width_fifo_cap;
input   img_width_empty_n;
output   img_width_read;
output  [15:0] img_height_c29_din;
input  [1:0] img_height_c29_num_data_valid;
input  [1:0] img_height_c29_fifo_cap;
input   img_height_c29_full_n;
output   img_height_c29_write;
output  [15:0] img_height_c31_din;
input  [1:0] img_height_c31_num_data_valid;
input  [1:0] img_height_c31_fifo_cap;
input   img_height_c31_full_n;
output   img_height_c31_write;
output  [15:0] img_width_c36_din;
input  [1:0] img_width_c36_num_data_valid;
input  [1:0] img_width_c36_fifo_cap;
input   img_width_c36_full_n;
output   img_width_c36_write;
output  [15:0] img_width_c38_din;
input  [1:0] img_width_c38_num_data_valid;
input  [1:0] img_width_c38_fifo_cap;
input   img_width_c38_full_n;
output   img_width_c38_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg gradx_mat_data_read;
reg gradx1_mat_data_write;
reg gradx2_mat_data_write;
reg img_height_read;
reg img_width_read;
reg img_height_c29_write;
reg img_height_c31_write;
reg img_width_c36_write;
reg img_width_c38_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_height_blk_n;
reg    img_width_blk_n;
reg    img_height_c29_blk_n;
reg    img_height_c31_blk_n;
reg    img_width_c36_blk_n;
reg    img_width_c38_blk_n;
reg   [15:0] img_width_read_reg_154;
reg    ap_block_state1;
reg   [15:0] img_height_read_reg_159;
wire    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start;
wire    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_done;
wire    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_idle;
wire    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_ready;
wire    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx_mat_data_read;
wire   [15:0] grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx1_mat_data_din;
wire    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx1_mat_data_write;
wire   [15:0] grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx2_mat_data_din;
wire    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx2_mat_data_write;
reg    grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln46_fu_131_p2;
wire    ap_CS_fsm_state3;
reg   [12:0] row_06_fu_60;
wire   [12:0] row_15_fu_136_p2;
wire   [15:0] zext_ln46_fu_127_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start_reg = 1'b0;
end

cornerHarris_accel_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start),
    .ap_done(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_done),
    .ap_idle(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_idle),
    .ap_ready(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_ready),
    .gradx_mat_data_dout(gradx_mat_data_dout),
    .gradx_mat_data_num_data_valid(2'd0),
    .gradx_mat_data_fifo_cap(2'd0),
    .gradx_mat_data_empty_n(gradx_mat_data_empty_n),
    .gradx_mat_data_read(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx_mat_data_read),
    .gradx1_mat_data_din(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx1_mat_data_din),
    .gradx1_mat_data_num_data_valid(2'd0),
    .gradx1_mat_data_fifo_cap(2'd0),
    .gradx1_mat_data_full_n(gradx1_mat_data_full_n),
    .gradx1_mat_data_write(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx1_mat_data_write),
    .gradx2_mat_data_din(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx2_mat_data_din),
    .gradx2_mat_data_num_data_valid(2'd0),
    .gradx2_mat_data_fifo_cap(2'd0),
    .gradx2_mat_data_full_n(gradx2_mat_data_full_n),
    .gradx2_mat_data_write(grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx2_mat_data_write),
    .img_width_load(img_width_read_reg_154)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_131_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_131_p2 == 1'd1))) begin
            grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_ready == 1'b1)) begin
            grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_06_fu_60 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_131_p2 == 1'd1))) begin
        row_06_fu_60 <= row_15_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_read_reg_159 <= img_height_dout;
        img_width_read_reg_154 <= img_width_dout;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_131_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gradx1_mat_data_write = grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx1_mat_data_write;
    end else begin
        gradx1_mat_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gradx2_mat_data_write = grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx2_mat_data_write;
    end else begin
        gradx2_mat_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gradx_mat_data_read = grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx_mat_data_read;
    end else begin
        gradx_mat_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_blk_n = img_height_empty_n;
    end else begin
        img_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c29_blk_n = img_height_c29_full_n;
    end else begin
        img_height_c29_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c29_write = 1'b1;
    end else begin
        img_height_c29_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c31_blk_n = img_height_c31_full_n;
    end else begin
        img_height_c31_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_c31_write = 1'b1;
    end else begin
        img_height_c31_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_read = 1'b1;
    end else begin
        img_height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_blk_n = img_width_empty_n;
    end else begin
        img_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c36_blk_n = img_width_c36_full_n;
    end else begin
        img_width_c36_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c36_write = 1'b1;
    end else begin
        img_width_c36_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c38_blk_n = img_width_c38_full_n;
    end else begin
        img_width_c38_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_c38_write = 1'b1;
    end else begin
        img_width_c38_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_read = 1'b1;
    end else begin
        img_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_131_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_131_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (img_width_c38_full_n == 1'b0) | (img_width_c36_full_n == 1'b0) | (img_height_c31_full_n == 1'b0) | (img_height_c29_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign gradx1_mat_data_din = grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx1_mat_data_din;

assign gradx2_mat_data_din = grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_gradx2_mat_data_din;

assign grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start = grp_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1_Pipeline_Col_Loop_fu_108_ap_start_reg;

assign icmp_ln46_fu_131_p2 = ((zext_ln46_fu_127_p1 < img_height_read_reg_159) ? 1'b1 : 1'b0);

assign img_height_c29_din = img_height_dout;

assign img_height_c31_din = img_height_dout;

assign img_width_c36_din = img_width_dout;

assign img_width_c38_din = img_width_dout;

assign row_15_fu_136_p2 = (row_06_fu_60 + 13'd1);

assign start_out = real_start;

assign zext_ln46_fu_127_p1 = row_06_fu_60;

endmodule //cornerHarris_accel_xFDuplicate_3_3840_2160_4_1_2_2_2_6_2160_1
