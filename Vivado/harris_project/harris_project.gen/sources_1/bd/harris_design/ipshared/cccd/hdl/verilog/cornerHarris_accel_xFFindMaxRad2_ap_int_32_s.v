// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cornerHarris_accel_xFFindMaxRad2_ap_int_32_s (
        ap_ready,
        l22_val,
        l02_val,
        l11_val,
        l12_val,
        l13_val,
        l20_val,
        l21_val,
        l23_val,
        l24_val,
        l31_val,
        l32_val,
        l33_val,
        l42_val,
        ap_return
);


output   ap_ready;
input  [31:0] l22_val;
input  [31:0] l02_val;
input  [31:0] l11_val;
input  [31:0] l12_val;
input  [31:0] l13_val;
input  [31:0] l20_val;
input  [31:0] l21_val;
input  [31:0] l23_val;
input  [31:0] l24_val;
input  [31:0] l31_val;
input  [31:0] l32_val;
input  [31:0] l33_val;
input  [31:0] l42_val;
output  [0:0] ap_return;

wire   [0:0] icmp_ln332_1_fu_112_p2;
wire   [0:0] icmp_ln332_2_fu_118_p2;
wire   [0:0] and_ln332_fu_178_p2;
wire   [0:0] icmp_ln332_fu_106_p2;
wire   [0:0] icmp_ln332_4_fu_130_p2;
wire   [0:0] icmp_ln332_5_fu_136_p2;
wire   [0:0] and_ln332_2_fu_190_p2;
wire   [0:0] icmp_ln332_3_fu_124_p2;
wire   [0:0] and_ln332_3_fu_196_p2;
wire   [0:0] and_ln332_1_fu_184_p2;
wire   [0:0] icmp_ln333_fu_148_p2;
wire   [0:0] icmp_ln333_1_fu_154_p2;
wire   [0:0] and_ln332_5_fu_208_p2;
wire   [0:0] icmp_ln332_6_fu_142_p2;
wire   [0:0] icmp_ln333_3_fu_166_p2;
wire   [0:0] icmp_ln333_4_fu_172_p2;
wire   [0:0] and_ln332_7_fu_220_p2;
wire   [0:0] icmp_ln333_2_fu_160_p2;
wire   [0:0] and_ln332_8_fu_226_p2;
wire   [0:0] and_ln332_6_fu_214_p2;
wire   [0:0] and_ln332_9_fu_232_p2;
wire   [0:0] and_ln332_4_fu_202_p2;

assign and_ln332_1_fu_184_p2 = (icmp_ln332_fu_106_p2 & and_ln332_fu_178_p2);

assign and_ln332_2_fu_190_p2 = (icmp_ln332_5_fu_136_p2 & icmp_ln332_4_fu_130_p2);

assign and_ln332_3_fu_196_p2 = (icmp_ln332_3_fu_124_p2 & and_ln332_2_fu_190_p2);

assign and_ln332_4_fu_202_p2 = (and_ln332_3_fu_196_p2 & and_ln332_1_fu_184_p2);

assign and_ln332_5_fu_208_p2 = (icmp_ln333_fu_148_p2 & icmp_ln333_1_fu_154_p2);

assign and_ln332_6_fu_214_p2 = (icmp_ln332_6_fu_142_p2 & and_ln332_5_fu_208_p2);

assign and_ln332_7_fu_220_p2 = (icmp_ln333_4_fu_172_p2 & icmp_ln333_3_fu_166_p2);

assign and_ln332_8_fu_226_p2 = (icmp_ln333_2_fu_160_p2 & and_ln332_7_fu_220_p2);

assign and_ln332_9_fu_232_p2 = (and_ln332_8_fu_226_p2 & and_ln332_6_fu_214_p2);

assign and_ln332_fu_178_p2 = (icmp_ln332_2_fu_118_p2 & icmp_ln332_1_fu_112_p2);

assign ap_ready = 1'b1;

assign ap_return = (and_ln332_9_fu_232_p2 & and_ln332_4_fu_202_p2);

assign icmp_ln332_1_fu_112_p2 = (($signed(l22_val) > $signed(l11_val)) ? 1'b1 : 1'b0);

assign icmp_ln332_2_fu_118_p2 = (($signed(l22_val) > $signed(l12_val)) ? 1'b1 : 1'b0);

assign icmp_ln332_3_fu_124_p2 = (($signed(l22_val) > $signed(l13_val)) ? 1'b1 : 1'b0);

assign icmp_ln332_4_fu_130_p2 = (($signed(l22_val) > $signed(l20_val)) ? 1'b1 : 1'b0);

assign icmp_ln332_5_fu_136_p2 = (($signed(l22_val) > $signed(l21_val)) ? 1'b1 : 1'b0);

assign icmp_ln332_6_fu_142_p2 = (($signed(l22_val) > $signed(l23_val)) ? 1'b1 : 1'b0);

assign icmp_ln332_fu_106_p2 = (($signed(l22_val) > $signed(l02_val)) ? 1'b1 : 1'b0);

assign icmp_ln333_1_fu_154_p2 = (($signed(l22_val) > $signed(l31_val)) ? 1'b1 : 1'b0);

assign icmp_ln333_2_fu_160_p2 = (($signed(l22_val) > $signed(l32_val)) ? 1'b1 : 1'b0);

assign icmp_ln333_3_fu_166_p2 = (($signed(l22_val) > $signed(l33_val)) ? 1'b1 : 1'b0);

assign icmp_ln333_4_fu_172_p2 = (($signed(l22_val) > $signed(l42_val)) ? 1'b1 : 1'b0);

assign icmp_ln333_fu_148_p2 = (($signed(l22_val) > $signed(l24_val)) ? 1'b1 : 1'b0);

endmodule //cornerHarris_accel_xFFindMaxRad2_ap_int_32_s
