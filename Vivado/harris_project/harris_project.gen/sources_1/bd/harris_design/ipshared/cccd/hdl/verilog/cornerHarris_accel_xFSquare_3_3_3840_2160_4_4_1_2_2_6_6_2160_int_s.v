// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cornerHarris_accel_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        grady1_mat_data_dout,
        grady1_mat_data_num_data_valid,
        grady1_mat_data_fifo_cap,
        grady1_mat_data_empty_n,
        grady1_mat_data_read,
        grady_2_data_din,
        grady_2_data_num_data_valid,
        grady_2_data_fifo_cap,
        grady_2_data_full_n,
        grady_2_data_write,
        img_height_dout,
        img_height_num_data_valid,
        img_height_fifo_cap,
        img_height_empty_n,
        img_height_read,
        img_width_dout,
        img_width_num_data_valid,
        img_width_fifo_cap,
        img_width_empty_n,
        img_width_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] grady1_mat_data_dout;
input  [1:0] grady1_mat_data_num_data_valid;
input  [1:0] grady1_mat_data_fifo_cap;
input   grady1_mat_data_empty_n;
output   grady1_mat_data_read;
output  [15:0] grady_2_data_din;
input  [1:0] grady_2_data_num_data_valid;
input  [1:0] grady_2_data_fifo_cap;
input   grady_2_data_full_n;
output   grady_2_data_write;
input  [15:0] img_height_dout;
input  [1:0] img_height_num_data_valid;
input  [1:0] img_height_fifo_cap;
input   img_height_empty_n;
output   img_height_read;
input  [15:0] img_width_dout;
input  [1:0] img_width_num_data_valid;
input  [1:0] img_width_fifo_cap;
input   img_width_empty_n;
output   img_width_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg grady1_mat_data_read;
reg grady_2_data_write;
reg img_height_read;
reg img_width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_height_blk_n;
reg    img_width_blk_n;
reg   [15:0] img_width_read_reg_108;
reg    ap_block_state1;
reg   [15:0] img_height_read_reg_113;
wire    grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start;
wire    grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_done;
wire    grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_idle;
wire    grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_ready;
wire    grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady1_mat_data_read;
wire   [15:0] grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady_2_data_din;
wire    grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady_2_data_write;
reg    grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln102_fu_85_p2;
wire    ap_CS_fsm_state3;
reg   [12:0] row_fu_48;
wire   [12:0] row_6_fu_90_p2;
wire   [15:0] zext_ln102_fu_81_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start_reg = 1'b0;
end

cornerHarris_accel_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start),
    .ap_done(grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_done),
    .ap_idle(grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_idle),
    .ap_ready(grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_ready),
    .grady1_mat_data_dout(grady1_mat_data_dout),
    .grady1_mat_data_num_data_valid(2'd0),
    .grady1_mat_data_fifo_cap(2'd0),
    .grady1_mat_data_empty_n(grady1_mat_data_empty_n),
    .grady1_mat_data_read(grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady1_mat_data_read),
    .grady_2_data_din(grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady_2_data_din),
    .grady_2_data_num_data_valid(2'd0),
    .grady_2_data_fifo_cap(2'd0),
    .grady_2_data_full_n(grady_2_data_full_n),
    .grady_2_data_write(grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady_2_data_write),
    .img_width_load(img_width_read_reg_108)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln102_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln102_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_ready == 1'b1)) begin
            grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_fu_48 <= 13'd0;
    end else if (((icmp_ln102_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_fu_48 <= row_6_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_read_reg_113 <= img_height_dout;
        img_width_read_reg_108 <= img_width_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grady1_mat_data_read = grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady1_mat_data_read;
    end else begin
        grady1_mat_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grady_2_data_write = grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady_2_data_write;
    end else begin
        grady_2_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_blk_n = img_height_empty_n;
    end else begin
        img_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_read = 1'b1;
    end else begin
        img_height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_blk_n = img_width_empty_n;
    end else begin
        img_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_read = 1'b1;
    end else begin
        img_width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln102_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grady_2_data_din = grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_grady_2_data_din;

assign grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start = grp_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_Pipeline_Col_Loop_fu_64_ap_start_reg;

assign icmp_ln102_fu_85_p2 = ((zext_ln102_fu_81_p1 < img_height_read_reg_113) ? 1'b1 : 1'b0);

assign row_6_fu_90_p2 = (row_fu_48 + 13'd1);

assign zext_ln102_fu_81_p1 = row_fu_48;

endmodule //cornerHarris_accel_xFSquare_3_3_3840_2160_4_4_1_2_2_6_6_2160_int_s
