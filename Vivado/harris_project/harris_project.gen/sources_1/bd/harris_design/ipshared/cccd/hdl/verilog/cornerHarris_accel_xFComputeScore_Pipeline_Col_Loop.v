// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cornerHarris_accel_xFComputeScore_Pipeline_Col_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gradx2g_data_dout,
        gradx2g_data_num_data_valid,
        gradx2g_data_fifo_cap,
        gradx2g_data_empty_n,
        gradx2g_data_read,
        grady2g_data_dout,
        grady2g_data_num_data_valid,
        grady2g_data_fifo_cap,
        grady2g_data_empty_n,
        grady2g_data_read,
        gradxyg_data_dout,
        gradxyg_data_num_data_valid,
        gradxyg_data_fifo_cap,
        gradxyg_data_empty_n,
        gradxyg_data_read,
        score_data_din,
        score_data_num_data_valid,
        score_data_fifo_cap,
        score_data_full_n,
        score_data_write,
        img_width_load,
        zext_ln373
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] gradx2g_data_dout;
input  [1:0] gradx2g_data_num_data_valid;
input  [1:0] gradx2g_data_fifo_cap;
input   gradx2g_data_empty_n;
output   gradx2g_data_read;
input  [15:0] grady2g_data_dout;
input  [1:0] grady2g_data_num_data_valid;
input  [1:0] grady2g_data_fifo_cap;
input   grady2g_data_empty_n;
output   grady2g_data_read;
input  [15:0] gradxyg_data_dout;
input  [1:0] gradxyg_data_num_data_valid;
input  [1:0] gradxyg_data_fifo_cap;
input   gradxyg_data_empty_n;
output   gradxyg_data_read;
output  [31:0] score_data_din;
input  [1:0] score_data_num_data_valid;
input  [1:0] score_data_fifo_cap;
input   score_data_full_n;
output   score_data_write;
input  [15:0] img_width_load;
input  [15:0] zext_ln373;

reg ap_idle;
reg gradx2g_data_read;
reg grady2g_data_read;
reg gradxyg_data_read;
reg score_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln379_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gradx2g_data_blk_n;
wire    ap_block_pp0_stage0;
reg    grady2g_data_blk_n;
reg    gradxyg_data_blk_n;
reg    score_data_blk_n;
wire   [45:0] zext_ln373_cast_fu_117_p1;
reg   [45:0] zext_ln373_cast_reg_260;
reg    ap_block_pp0_stage0_11001;
reg  signed [13:0] val1_1_reg_269;
reg  signed [13:0] val2_1_reg_275;
wire  signed [27:0] sext_ln411_fu_176_p1;
wire   [27:0] tmp_res_fu_192_p2;
reg  signed [27:0] tmp_res_reg_287;
wire  signed [29:0] sext_ln419_fu_204_p1;
wire  signed [27:0] grp_fu_246_p3;
reg  signed [27:0] det_res_reg_303;
reg  signed [27:0] det_res_reg_303_pp0_iter5_reg;
wire   [30:0] dst_buf_fu_236_p2;
reg   [30:0] dst_buf_reg_308;
reg   [15:0] col_015_fu_72;
wire   [15:0] add_ln379_fu_135_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_col_015_load;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] grp_fu_113_p1;
wire   [13:0] trunc_ln_fu_166_p4;
wire  signed [14:0] sext_ln393_1_fu_183_p1;
wire  signed [14:0] sext_ln393_fu_180_p1;
wire   [14:0] add_ln416_fu_198_p2;
wire  signed [14:0] grp_fu_208_p0;
wire  signed [14:0] grp_fu_208_p1;
wire  signed [29:0] grp_fu_208_p2;
wire   [45:0] grp_fu_113_p2;
wire   [29:0] trace_res2_fu_219_p4;
wire  signed [30:0] sext_ln425_fu_233_p1;
wire  signed [30:0] sext_ln364_fu_229_p1;
wire  signed [13:0] grp_fu_246_p0;
wire  signed [13:0] grp_fu_246_p1;
reg    grp_fu_113_ce;
reg    grp_fu_208_ce;
reg    grp_fu_246_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cornerHarris_accel_mul_30s_16ns_46_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 46 ))
mul_30s_16ns_46_3_1_U223(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_208_p2),
    .din1(grp_fu_113_p1),
    .ce(grp_fu_113_ce),
    .dout(grp_fu_113_p2)
);

cornerHarris_accel_mul_14s_14s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 28 ))
mul_14s_14s_28_1_1_U224(
    .din0(val2_1_reg_275),
    .din1(val1_1_reg_269),
    .dout(tmp_res_fu_192_p2)
);

cornerHarris_accel_mul_15s_15s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
mul_15s_15s_30_3_1_U225(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_208_p0),
    .din1(grp_fu_208_p1),
    .ce(grp_fu_208_ce),
    .dout(grp_fu_208_p2)
);

cornerHarris_accel_mac_mulsub_14s_14s_28s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_mulsub_14s_14s_28s_28_4_1_U226(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_246_p0),
    .din1(grp_fu_246_p1),
    .din2(tmp_res_reg_287),
    .ce(grp_fu_246_ce),
    .dout(grp_fu_246_p3)
);

cornerHarris_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln379_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_015_fu_72 <= add_ln379_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_015_fu_72 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        val1_1_reg_269 <= {{gradx2g_data_dout[15:2]}};
        val2_1_reg_275 <= {{grady2g_data_dout[15:2]}};
        zext_ln373_cast_reg_260[15 : 0] <= zext_ln373_cast_fu_117_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        det_res_reg_303_pp0_iter5_reg <= det_res_reg_303;
        dst_buf_reg_308 <= dst_buf_fu_236_p2;
        tmp_res_reg_287 <= tmp_res_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        det_res_reg_303 <= grp_fu_246_p3;
    end
end

always @ (*) begin
    if (((icmp_ln379_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_col_015_load = 16'd0;
    end else begin
        ap_sig_allocacmp_col_015_load = col_015_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2g_data_blk_n = gradx2g_data_empty_n;
    end else begin
        gradx2g_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2g_data_read = 1'b1;
    end else begin
        gradx2g_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradxyg_data_blk_n = gradxyg_data_empty_n;
    end else begin
        gradxyg_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradxyg_data_read = 1'b1;
    end else begin
        gradxyg_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2g_data_blk_n = grady2g_data_empty_n;
    end else begin
        grady2g_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2g_data_read = 1'b1;
    end else begin
        grady2g_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_113_ce = 1'b1;
    end else begin
        grp_fu_113_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_208_ce = 1'b1;
    end else begin
        grp_fu_208_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_246_ce = 1'b1;
    end else begin
        grp_fu_246_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        score_data_blk_n = score_data_full_n;
    end else begin
        score_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        score_data_write = 1'b1;
    end else begin
        score_data_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln379_fu_135_p2 = (ap_sig_allocacmp_col_015_load + 16'd1);

assign add_ln416_fu_198_p2 = ($signed(sext_ln393_1_fu_183_p1) + $signed(sext_ln393_fu_180_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((score_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((gradxyg_data_empty_n == 1'b0) | (grady2g_data_empty_n == 1'b0) | (gradx2g_data_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((score_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((gradxyg_data_empty_n == 1'b0) | (grady2g_data_empty_n == 1'b0) | (gradx2g_data_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((score_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((gradxyg_data_empty_n == 1'b0) | (grady2g_data_empty_n == 1'b0) | (gradx2g_data_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((gradxyg_data_empty_n == 1'b0) | (grady2g_data_empty_n == 1'b0) | (gradx2g_data_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = (score_data_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dst_buf_fu_236_p2 = ($signed(sext_ln425_fu_233_p1) - $signed(sext_ln364_fu_229_p1));

assign grp_fu_113_p1 = zext_ln373_cast_reg_260;

assign grp_fu_208_p0 = sext_ln419_fu_204_p1;

assign grp_fu_208_p1 = sext_ln419_fu_204_p1;

assign grp_fu_246_p0 = sext_ln411_fu_176_p1;

assign grp_fu_246_p1 = sext_ln411_fu_176_p1;

assign icmp_ln379_fu_129_p2 = ((ap_sig_allocacmp_col_015_load == img_width_load) ? 1'b1 : 1'b0);

assign score_data_din = $signed(dst_buf_reg_308);

assign sext_ln364_fu_229_p1 = $signed(trace_res2_fu_219_p4);

assign sext_ln393_1_fu_183_p1 = val2_1_reg_275;

assign sext_ln393_fu_180_p1 = val1_1_reg_269;

assign sext_ln411_fu_176_p1 = $signed(trunc_ln_fu_166_p4);

assign sext_ln419_fu_204_p1 = $signed(add_ln416_fu_198_p2);

assign sext_ln425_fu_233_p1 = det_res_reg_303_pp0_iter5_reg;

assign trace_res2_fu_219_p4 = {{grp_fu_113_p2[45:16]}};

assign trunc_ln_fu_166_p4 = {{gradxyg_data_dout[15:2]}};

assign zext_ln373_cast_fu_117_p1 = zext_ln373;

always @ (posedge ap_clk) begin
    zext_ln373_cast_reg_260[45:16] <= 30'b000000000000000000000000000000;
end

endmodule //cornerHarris_accel_xFComputeScore_Pipeline_Col_Loop
