// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_accel_xFMagnitudeKernel_Pipeline_colLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_dstgx_data_dout,
        p_dstgx_data_num_data_valid,
        p_dstgx_data_fifo_cap,
        p_dstgx_data_empty_n,
        p_dstgx_data_read,
        p_dstgy_data_dout,
        p_dstgy_data_num_data_valid,
        p_dstgy_data_fifo_cap,
        p_dstgy_data_empty_n,
        p_dstgy_data_read,
        p_dst_data_din,
        p_dst_data_num_data_valid,
        p_dst_data_fifo_cap,
        p_dst_data_full_n,
        p_dst_data_write,
        p_read1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_dstgx_data_dout;
input  [1:0] p_dstgx_data_num_data_valid;
input  [1:0] p_dstgx_data_fifo_cap;
input   p_dstgx_data_empty_n;
output   p_dstgx_data_read;
input  [15:0] p_dstgy_data_dout;
input  [1:0] p_dstgy_data_num_data_valid;
input  [1:0] p_dstgy_data_fifo_cap;
input   p_dstgy_data_empty_n;
output   p_dstgy_data_read;
output  [15:0] p_dst_data_din;
input  [1:0] p_dst_data_num_data_valid;
input  [1:0] p_dst_data_fifo_cap;
input   p_dst_data_full_n;
output   p_dst_data_write;
input  [11:0] p_read1;

reg ap_idle;
reg p_dstgx_data_read;
reg p_dstgy_data_read;
reg p_dst_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_state18_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln81_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    p_dstgx_data_blk_n;
wire    ap_block_pp0_stage0;
reg    p_dstgy_data_blk_n;
reg    p_dst_data_blk_n;
reg   [0:0] icmp_ln81_reg_177;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln81_reg_177_pp0_iter1_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter2_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter3_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter4_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter5_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter6_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter7_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter8_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter9_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter10_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter11_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter12_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter13_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter14_reg;
reg   [0:0] icmp_ln81_reg_177_pp0_iter15_reg;
wire   [15:0] p_1_fu_121_p3;
reg   [15:0] p_1_reg_181;
wire   [15:0] q_1_fu_143_p3;
reg   [15:0] q_1_reg_186;
reg   [15:0] q_1_reg_186_pp0_iter2_reg;
wire  signed [31:0] sext_ln107_fu_151_p1;
wire   [31:0] mul_ln109_1_fu_157_p2;
reg  signed [31:0] mul_ln109_1_reg_197;
wire  signed [31:0] grp_fu_163_p3;
reg   [31:0] result_temp_reg_202;
wire   [15:0] grp_Sqrt_fu_77_ap_return;
reg   [15:0] tmp1_reg_207;
reg    grp_Sqrt_fu_77_ap_ce;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call16;
reg    ap_block_state2_pp0_stage0_iter1_ignore_call16;
wire    ap_block_state3_pp0_stage0_iter2_ignore_call16;
wire    ap_block_state4_pp0_stage0_iter3_ignore_call16;
wire    ap_block_state5_pp0_stage0_iter4_ignore_call16;
wire    ap_block_state6_pp0_stage0_iter5_ignore_call16;
wire    ap_block_state7_pp0_stage0_iter6_ignore_call16;
wire    ap_block_state8_pp0_stage0_iter7_ignore_call16;
wire    ap_block_state9_pp0_stage0_iter8_ignore_call16;
wire    ap_block_state10_pp0_stage0_iter9_ignore_call16;
wire    ap_block_state11_pp0_stage0_iter10_ignore_call16;
wire    ap_block_state12_pp0_stage0_iter11_ignore_call16;
wire    ap_block_state13_pp0_stage0_iter12_ignore_call16;
wire    ap_block_state14_pp0_stage0_iter13_ignore_call16;
wire    ap_block_state15_pp0_stage0_iter14_ignore_call16;
wire    ap_block_state16_pp0_stage0_iter15_ignore_call16;
wire    ap_block_state17_pp0_stage0_iter16_ignore_call16;
reg    ap_block_state18_pp0_stage0_iter17_ignore_call16;
reg    ap_block_pp0_stage0_11001_ignoreCallOp49;
reg   [11:0] j_fu_48;
wire   [11:0] j_4_fu_96_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_j_3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_fu_107_p3;
wire   [15:0] sub_ln100_fu_115_p2;
wire   [0:0] tmp_9_fu_129_p3;
wire   [15:0] sub_ln101_fu_137_p2;
wire  signed [15:0] mul_ln109_1_fu_157_p0;
wire  signed [31:0] sext_ln108_fu_154_p1;
wire  signed [15:0] mul_ln109_1_fu_157_p1;
wire  signed [15:0] grp_fu_163_p0;
wire  signed [15:0] grp_fu_163_p1;
reg    grp_fu_163_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sobel_accel_Sqrt grp_Sqrt_fu_77(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .D(result_temp_reg_202),
    .ap_return(grp_Sqrt_fu_77_ap_return),
    .ap_ce(grp_Sqrt_fu_77_ap_ce)
);

sobel_accel_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U105(
    .din0(mul_ln109_1_fu_157_p0),
    .din1(mul_ln109_1_fu_157_p1),
    .dout(mul_ln109_1_fu_157_p2)
);

sobel_accel_mac_muladd_16s_16s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16s_16s_32s_32_4_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_163_p0),
    .din1(grp_fu_163_p1),
    .din2(mul_ln109_1_reg_197),
    .ce(grp_fu_163_ce),
    .dout(grp_fu_163_p3)
);

sobel_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln81_fu_90_p2 == 1'd0))) begin
            j_fu_48 <= j_4_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln81_reg_177_pp0_iter10_reg <= icmp_ln81_reg_177_pp0_iter9_reg;
        icmp_ln81_reg_177_pp0_iter11_reg <= icmp_ln81_reg_177_pp0_iter10_reg;
        icmp_ln81_reg_177_pp0_iter12_reg <= icmp_ln81_reg_177_pp0_iter11_reg;
        icmp_ln81_reg_177_pp0_iter13_reg <= icmp_ln81_reg_177_pp0_iter12_reg;
        icmp_ln81_reg_177_pp0_iter14_reg <= icmp_ln81_reg_177_pp0_iter13_reg;
        icmp_ln81_reg_177_pp0_iter15_reg <= icmp_ln81_reg_177_pp0_iter14_reg;
        icmp_ln81_reg_177_pp0_iter2_reg <= icmp_ln81_reg_177_pp0_iter1_reg;
        icmp_ln81_reg_177_pp0_iter3_reg <= icmp_ln81_reg_177_pp0_iter2_reg;
        icmp_ln81_reg_177_pp0_iter4_reg <= icmp_ln81_reg_177_pp0_iter3_reg;
        icmp_ln81_reg_177_pp0_iter5_reg <= icmp_ln81_reg_177_pp0_iter4_reg;
        icmp_ln81_reg_177_pp0_iter6_reg <= icmp_ln81_reg_177_pp0_iter5_reg;
        icmp_ln81_reg_177_pp0_iter7_reg <= icmp_ln81_reg_177_pp0_iter6_reg;
        icmp_ln81_reg_177_pp0_iter8_reg <= icmp_ln81_reg_177_pp0_iter7_reg;
        icmp_ln81_reg_177_pp0_iter9_reg <= icmp_ln81_reg_177_pp0_iter8_reg;
        mul_ln109_1_reg_197 <= mul_ln109_1_fu_157_p2;
        q_1_reg_186_pp0_iter2_reg <= q_1_reg_186;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln81_reg_177 <= icmp_ln81_fu_90_p2;
        icmp_ln81_reg_177_pp0_iter1_reg <= icmp_ln81_reg_177;
        p_1_reg_181 <= p_1_fu_121_p3;
        q_1_reg_186 <= q_1_fu_143_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_temp_reg_202 <= grp_fu_163_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_reg_177_pp0_iter15_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp1_reg_207 <= grp_Sqrt_fu_77_ap_return;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln81_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_3 = 12'd0;
    end else begin
        ap_sig_allocacmp_j_3 = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp49))) begin
        grp_Sqrt_fu_77_ap_ce = 1'b1;
    end else begin
        grp_Sqrt_fu_77_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_163_ce = 1'b1;
    end else begin
        grp_fu_163_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_dst_data_blk_n = p_dst_data_full_n;
    end else begin
        p_dst_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_write = 1'b1;
    end else begin
        p_dst_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        p_dstgx_data_blk_n = p_dstgx_data_empty_n;
    end else begin
        p_dstgx_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dstgx_data_read = 1'b1;
    end else begin
        p_dstgx_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        p_dstgy_data_blk_n = p_dstgy_data_empty_n;
    end else begin
        p_dstgy_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dstgy_data_read = 1'b1;
    end else begin
        p_dstgy_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((p_dstgy_data_empty_n == 1'b0) | (p_dstgx_data_empty_n == 1'b0))) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (p_dst_data_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((p_dstgy_data_empty_n == 1'b0) | (p_dstgx_data_empty_n == 1'b0))) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (p_dst_data_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp49 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((p_dstgy_data_empty_n == 1'b0) | (p_dstgx_data_empty_n == 1'b0))) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (p_dst_data_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((p_dstgy_data_empty_n == 1'b0) | (p_dstgx_data_empty_n == 1'b0))) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (p_dst_data_full_n == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16_ignore_call16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter17 = (p_dst_data_full_n == 1'b0);
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter17_ignore_call16 = (p_dst_data_full_n == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((p_dstgy_data_empty_n == 1'b0) | (p_dstgx_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_ignore_call16 = ((p_dstgy_data_empty_n == 1'b0) | (p_dstgx_data_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_163_p0 = sext_ln107_fu_151_p1;

assign grp_fu_163_p1 = sext_ln107_fu_151_p1;

assign icmp_ln81_fu_90_p2 = ((ap_sig_allocacmp_j_3 == p_read1) ? 1'b1 : 1'b0);

assign j_4_fu_96_p2 = (ap_sig_allocacmp_j_3 + 12'd1);

assign mul_ln109_1_fu_157_p0 = sext_ln108_fu_154_p1;

assign mul_ln109_1_fu_157_p1 = sext_ln108_fu_154_p1;

assign p_1_fu_121_p3 = ((tmp_fu_107_p3[0:0] == 1'b1) ? sub_ln100_fu_115_p2 : p_dstgx_data_dout);

assign p_dst_data_din = tmp1_reg_207;

assign q_1_fu_143_p3 = ((tmp_9_fu_129_p3[0:0] == 1'b1) ? sub_ln101_fu_137_p2 : p_dstgy_data_dout);

assign sext_ln107_fu_151_p1 = $signed(p_1_reg_181);

assign sext_ln108_fu_154_p1 = $signed(q_1_reg_186_pp0_iter2_reg);

assign sub_ln100_fu_115_p2 = (16'd0 - p_dstgx_data_dout);

assign sub_ln101_fu_137_p2 = (16'd0 - p_dstgy_data_dout);

assign tmp_9_fu_129_p3 = p_dstgy_data_dout[32'd15];

assign tmp_fu_107_p3 = p_dstgx_data_dout[32'd15];

endmodule //sobel_accel_xFMagnitudeKernel_Pipeline_colLoop
