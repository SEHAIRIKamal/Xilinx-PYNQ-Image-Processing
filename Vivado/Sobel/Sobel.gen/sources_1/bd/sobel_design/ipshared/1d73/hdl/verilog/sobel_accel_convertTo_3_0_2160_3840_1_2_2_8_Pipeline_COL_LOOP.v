// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_accel_convertTo_3_0_2160_3840_1_2_2_8_Pipeline_COL_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_dst_data_dout,
        p_dst_data_num_data_valid,
        p_dst_data_fifo_cap,
        p_dst_data_empty_n,
        p_dst_data_read,
        dst_1_data_din,
        dst_1_data_num_data_valid,
        dst_1_data_fifo_cap,
        dst_1_data_full_n,
        dst_1_data_write,
        width,
        p_shift_load,
        sub_i377_i,
        cmp_i370_i
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_dst_data_dout;
input  [1:0] p_dst_data_num_data_valid;
input  [1:0] p_dst_data_fifo_cap;
input   p_dst_data_empty_n;
output   p_dst_data_read;
output  [7:0] dst_1_data_din;
input  [1:0] dst_1_data_num_data_valid;
input  [1:0] dst_1_data_fifo_cap;
input   dst_1_data_full_n;
output   dst_1_data_write;
input  [15:0] width;
input  [31:0] p_shift_load;
input  [31:0] sub_i377_i;
input  [0:0] cmp_i370_i;

reg ap_idle;
reg p_dst_data_read;
reg dst_1_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln81_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    p_dst_data_blk_n;
wire    ap_block_pp0_stage0;
reg    dst_1_data_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] buf_reg_227;
reg   [6:0] tmp_10_reg_232;
wire   [7:0] trunc_ln105_fu_184_p1;
reg   [7:0] trunc_ln105_reg_237;
reg   [12:0] col_fu_64;
wire   [12:0] col_6_fu_123_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_col_5;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln81_fu_113_p1;
wire  signed [31:0] sext_ln102_fu_134_p1;
wire   [31:0] ashr_ln102_fu_137_p2;
wire   [31:0] shl_ln102_fu_142_p2;
wire   [31:0] select_ln102_fu_147_p3;
wire   [0:0] tmp_fu_158_p3;
wire   [14:0] trunc_ln97_fu_154_p1;
wire   [14:0] val_1_fu_166_p3;
wire   [0:0] icmp_ln104_fu_188_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sobel_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_117_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_fu_64 <= col_6_fu_123_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_fu_64 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        buf_reg_227 <= p_dst_data_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_10_reg_232 <= {{val_1_fu_166_p3[14:8]}};
        trunc_ln105_reg_237 <= trunc_ln105_fu_184_p1;
    end
end

always @ (*) begin
    if (((icmp_ln81_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_col_5 = 13'd0;
    end else begin
        ap_sig_allocacmp_col_5 = col_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_1_data_blk_n = dst_1_data_full_n;
    end else begin
        dst_1_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_1_data_write = 1'b1;
    end else begin
        dst_1_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_data_blk_n = p_dst_data_empty_n;
    end else begin
        p_dst_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_data_read = 1'b1;
    end else begin
        p_dst_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((dst_1_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((p_dst_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((dst_1_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((p_dst_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((dst_1_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((p_dst_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (p_dst_data_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (dst_1_data_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln102_fu_137_p2 = $signed(sext_ln102_fu_134_p1) >>> p_shift_load;

assign col_6_fu_123_p2 = (ap_sig_allocacmp_col_5 + 13'd1);

assign dst_1_data_din = ((icmp_ln104_fu_188_p2[0:0] == 1'b1) ? 8'd255 : trunc_ln105_reg_237);

assign icmp_ln104_fu_188_p2 = ((tmp_10_reg_232 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_117_p2 = ((zext_ln81_fu_113_p1 < width) ? 1'b1 : 1'b0);

assign select_ln102_fu_147_p3 = ((cmp_i370_i[0:0] == 1'b1) ? ashr_ln102_fu_137_p2 : shl_ln102_fu_142_p2);

assign sext_ln102_fu_134_p1 = $signed(buf_reg_227);

assign shl_ln102_fu_142_p2 = sext_ln102_fu_134_p1 << sub_i377_i;

assign tmp_fu_158_p3 = select_ln102_fu_147_p3[32'd15];

assign trunc_ln105_fu_184_p1 = val_1_fu_166_p3[7:0];

assign trunc_ln97_fu_154_p1 = select_ln102_fu_147_p3[14:0];

assign val_1_fu_166_p3 = ((tmp_fu_158_p3[0:0] == 1'b1) ? 15'd0 : trunc_ln97_fu_154_p1);

assign zext_ln81_fu_113_p1 = ap_sig_allocacmp_col_5;

endmodule //sobel_accel_convertTo_3_0_2160_3840_1_2_2_8_Pipeline_COL_LOOP
