// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module rgb2gray2thresh_accel_xfMat2axis_8_0_2160_3840_1_Pipeline_loop_col_mat2axi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_imgOutput2_data_dout,
        p_imgOutput2_data_num_data_valid,
        p_imgOutput2_data_fifo_cap,
        p_imgOutput2_data_empty_n,
        p_imgOutput2_data_read,
        imgOutput_TREADY,
        i,
        imgOutput_TDATA,
        imgOutput_TVALID,
        imgOutput_TKEEP,
        imgOutput_TSTRB,
        imgOutput_TUSER,
        imgOutput_TLAST,
        imgOutput_TID,
        imgOutput_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_imgOutput2_data_dout;
input  [1:0] p_imgOutput2_data_num_data_valid;
input  [1:0] p_imgOutput2_data_fifo_cap;
input   p_imgOutput2_data_empty_n;
output   p_imgOutput2_data_read;
input   imgOutput_TREADY;
input  [11:0] i;
output  [7:0] imgOutput_TDATA;
output   imgOutput_TVALID;
output  [0:0] imgOutput_TKEEP;
output  [0:0] imgOutput_TSTRB;
output  [0:0] imgOutput_TUSER;
output  [0:0] imgOutput_TLAST;
output  [0:0] imgOutput_TID;
output  [0:0] imgOutput_TDEST;

reg ap_idle;
reg p_imgOutput2_data_read;
reg imgOutput_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln103_fu_123_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    p_imgOutput2_data_blk_n;
wire    ap_block_pp0_stage0;
reg    imgOutput_TDATA_blk_n;
wire   [0:0] axi_last_fu_147_p2;
reg   [0:0] axi_last_reg_168;
reg    ap_block_pp0_stage0_11001;
reg   [11:0] j_fu_68;
wire   [11:0] j_2_fu_129_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_j_1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln108_1_fu_141_p2;
wire   [0:0] icmp_ln108_fu_135_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

rgb2gray2thresh_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln103_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_68 <= j_2_fu_129_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_68 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_123_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_last_reg_168 <= axi_last_fu_147_p2;
    end
end

always @ (*) begin
    if (((icmp_ln103_fu_123_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput_TDATA_blk_n = imgOutput_TREADY;
    end else begin
        imgOutput_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput_TVALID = 1'b1;
    end else begin
        imgOutput_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_imgOutput2_data_blk_n = p_imgOutput2_data_empty_n;
    end else begin
        p_imgOutput2_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_imgOutput2_data_read = 1'b1;
    end else begin
        p_imgOutput2_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((imgOutput_TREADY == 1'b0) | (p_imgOutput2_data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((imgOutput_TREADY == 1'b0) | (p_imgOutput2_data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((imgOutput_TREADY == 1'b0) | (p_imgOutput2_data_empty_n == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((imgOutput_TREADY == 1'b0) | (p_imgOutput2_data_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign axi_last_fu_147_p2 = (icmp_ln108_fu_135_p2 & icmp_ln108_1_fu_141_p2);

assign icmp_ln103_fu_123_p2 = ((ap_sig_allocacmp_j_1 == 12'd3840) ? 1'b1 : 1'b0);

assign icmp_ln108_1_fu_141_p2 = ((i == 12'd2159) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_135_p2 = ((ap_sig_allocacmp_j_1 == 12'd3839) ? 1'b1 : 1'b0);

assign imgOutput_TDATA = p_imgOutput2_data_dout;

assign imgOutput_TDEST = 1'd0;

assign imgOutput_TID = 1'd0;

assign imgOutput_TKEEP = 1'd1;

assign imgOutput_TLAST = axi_last_reg_168;

assign imgOutput_TSTRB = 1'd0;

assign imgOutput_TUSER = 1'd0;

assign j_2_fu_129_p2 = (ap_sig_allocacmp_j_1 + 12'd1);

endmodule //rgb2gray2thresh_accel_xfMat2axis_8_0_2160_3840_1_Pipeline_loop_col_mat2axi
