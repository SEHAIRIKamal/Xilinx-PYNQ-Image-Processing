// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module scharr_accel_xFScharrFilterKernel_Pipeline_VITIS_LOOP_466_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        GradientValuesX_17_reload,
        GradientValuesY_18_reload,
        src_buf1_reload,
        src_buf2_reload,
        src_buf3_1_reload,
        src_buf1_1_reload,
        src_buf3_reload,
        GradientValuesX_out,
        GradientValuesX_out_ap_vld,
        GradientValuesY_out,
        GradientValuesY_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] GradientValuesX_17_reload;
input  [7:0] GradientValuesY_18_reload;
input  [23:0] src_buf1_reload;
input  [23:0] src_buf2_reload;
input  [23:0] src_buf3_1_reload;
input  [23:0] src_buf1_1_reload;
input  [23:0] src_buf3_reload;
output  [7:0] GradientValuesX_out;
output   GradientValuesX_out_ap_vld;
output  [7:0] GradientValuesY_out;
output   GradientValuesY_out_ap_vld;

reg ap_idle;
reg GradientValuesX_out_ap_vld;
reg GradientValuesY_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln466_fu_188_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln466_reg_739;
reg   [0:0] icmp_ln466_reg_739_pp0_iter1_reg;
reg   [0:0] icmp_ln466_reg_739_pp0_iter2_reg;
reg   [0:0] icmp_ln466_reg_739_pp0_iter3_reg;
reg   [0:0] icmp_ln466_reg_739_pp0_iter4_reg;
wire   [15:0] trunc_ln469_fu_299_p1;
reg   [15:0] trunc_ln469_reg_743;
wire   [14:0] trunc_ln470_fu_393_p1;
reg   [14:0] trunc_ln470_reg_749;
wire   [15:0] trunc_ln467_fu_487_p1;
reg   [15:0] trunc_ln467_reg_754;
wire   [14:0] trunc_ln475_fu_581_p1;
reg   [14:0] trunc_ln475_reg_760;
wire   [14:0] trunc_ln472_fu_675_p1;
reg   [14:0] trunc_ln472_reg_765;
wire   [7:0] grp_xFGradientX_16_0_s_fu_140_ap_return;
reg   [7:0] ref_tmp_reg_770;
wire   [7:0] grp_xFGradientY_16_0_s_fu_153_ap_return;
reg   [7:0] ref_tmp1_reg_775;
reg    grp_xFGradientX_16_0_s_fu_140_ap_ce;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call49;
wire    ap_block_state2_pp0_stage0_iter1_ignore_call49;
wire    ap_block_state3_pp0_stage0_iter2_ignore_call49;
wire    ap_block_state4_pp0_stage0_iter3_ignore_call49;
wire    ap_block_state5_pp0_stage0_iter4_ignore_call49;
wire    ap_block_state6_pp0_stage0_iter5_ignore_call49;
wire    ap_block_state7_pp0_stage0_iter6_ignore_call49;
wire    ap_block_pp0_stage0_11001_ignoreCallOp111;
reg    grp_xFGradientY_16_0_s_fu_153_ap_ce;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call80;
wire    ap_block_state2_pp0_stage0_iter1_ignore_call80;
wire    ap_block_state3_pp0_stage0_iter2_ignore_call80;
wire    ap_block_state4_pp0_stage0_iter3_ignore_call80;
wire    ap_block_state5_pp0_stage0_iter4_ignore_call80;
wire    ap_block_state6_pp0_stage0_iter5_ignore_call80;
wire    ap_block_state7_pp0_stage0_iter6_ignore_call80;
wire    ap_block_pp0_stage0_11001_ignoreCallOp112;
wire    ap_block_pp0_stage0;
reg   [7:0] GradientValuesY_fu_68;
wire    ap_loop_init;
reg   [7:0] GradientValuesX_fu_72;
reg   [1:0] i_fu_76;
wire   [1:0] i_4_fu_194_p2;
reg   [1:0] ap_sig_allocacmp_i_3;
reg   [4:0] q_fu_80;
wire   [4:0] q_1_fu_679_p2;
reg   [4:0] ap_sig_allocacmp_q_load;
wire    ap_block_pp0_stage0_01001;
wire   [4:0] or_ln468_fu_203_p2;
wire   [0:0] icmp_ln468_fu_209_p2;
wire   [4:0] sub_ln468_fu_225_p2;
wire   [4:0] sub_ln468_2_fu_237_p2;
reg   [23:0] tmp_fu_215_p4;
wire   [4:0] sub_ln468_1_fu_231_p2;
wire   [4:0] select_ln468_fu_243_p3;
wire   [4:0] select_ln468_2_fu_259_p3;
wire   [4:0] sub_ln468_3_fu_267_p2;
wire   [23:0] select_ln468_1_fu_251_p3;
wire   [23:0] zext_ln468_fu_273_p1;
wire   [23:0] zext_ln468_1_fu_277_p1;
wire   [23:0] lshr_ln468_fu_281_p2;
wire   [23:0] lshr_ln468_1_fu_287_p2;
wire   [23:0] and_ln468_fu_293_p2;
wire   [0:0] icmp_ln469_fu_303_p2;
wire   [4:0] sub_ln469_fu_319_p2;
wire   [4:0] sub_ln469_2_fu_331_p2;
reg   [23:0] tmp_1_fu_309_p4;
wire   [4:0] sub_ln469_1_fu_325_p2;
wire   [4:0] select_ln469_fu_337_p3;
wire   [4:0] select_ln469_2_fu_353_p3;
wire   [4:0] sub_ln469_3_fu_361_p2;
wire   [23:0] select_ln469_1_fu_345_p3;
wire   [23:0] zext_ln469_fu_367_p1;
wire   [23:0] zext_ln469_1_fu_371_p1;
wire   [23:0] lshr_ln469_fu_375_p2;
wire   [23:0] lshr_ln469_1_fu_381_p2;
wire   [23:0] and_ln469_fu_387_p2;
wire   [0:0] icmp_ln470_fu_397_p2;
wire   [4:0] sub_ln470_fu_413_p2;
wire   [4:0] sub_ln470_2_fu_425_p2;
reg   [23:0] tmp_2_fu_403_p4;
wire   [4:0] sub_ln470_1_fu_419_p2;
wire   [4:0] select_ln470_fu_431_p3;
wire   [4:0] select_ln470_2_fu_447_p3;
wire   [4:0] sub_ln470_3_fu_455_p2;
wire   [23:0] select_ln470_1_fu_439_p3;
wire   [23:0] zext_ln470_fu_461_p1;
wire   [23:0] zext_ln470_1_fu_465_p1;
wire   [23:0] lshr_ln470_fu_469_p2;
wire   [23:0] lshr_ln470_1_fu_475_p2;
wire   [23:0] and_ln470_fu_481_p2;
wire   [0:0] icmp_ln473_fu_491_p2;
wire   [4:0] sub_ln473_fu_507_p2;
wire   [4:0] sub_ln473_2_fu_519_p2;
reg   [23:0] tmp_3_fu_497_p4;
wire   [4:0] sub_ln473_1_fu_513_p2;
wire   [4:0] select_ln473_fu_525_p3;
wire   [4:0] select_ln473_2_fu_541_p3;
wire   [4:0] sub_ln473_3_fu_549_p2;
wire   [23:0] select_ln473_1_fu_533_p3;
wire   [23:0] zext_ln473_fu_555_p1;
wire   [23:0] zext_ln473_1_fu_559_p1;
wire   [23:0] lshr_ln473_fu_563_p2;
wire   [23:0] lshr_ln473_1_fu_569_p2;
wire   [23:0] and_ln473_fu_575_p2;
wire   [0:0] icmp_ln475_fu_585_p2;
wire   [4:0] sub_ln475_fu_601_p2;
wire   [4:0] sub_ln475_2_fu_613_p2;
reg   [23:0] tmp_4_fu_591_p4;
wire   [4:0] sub_ln475_1_fu_607_p2;
wire   [4:0] select_ln475_fu_619_p3;
wire   [4:0] select_ln475_2_fu_635_p3;
wire   [4:0] sub_ln475_3_fu_643_p2;
wire   [23:0] select_ln475_1_fu_627_p3;
wire   [23:0] zext_ln475_fu_649_p1;
wire   [23:0] zext_ln475_1_fu_653_p1;
wire   [23:0] lshr_ln475_fu_657_p2;
wire   [23:0] lshr_ln475_1_fu_663_p2;
wire   [23:0] and_ln475_fu_669_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

scharr_accel_xFGradientX_16_0_s grp_xFGradientX_16_0_s_fu_140(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .vt0_val(trunc_ln469_reg_743),
    .vt2_val(8'd0),
    .vm0_val(trunc_ln470_reg_749),
    .vm2_val(8'd0),
    .vb0_val(trunc_ln467_reg_754),
    .vb2_val(8'd0),
    .ap_return(grp_xFGradientX_16_0_s_fu_140_ap_return),
    .ap_ce(grp_xFGradientX_16_0_s_fu_140_ap_ce)
);

scharr_accel_xFGradientY_16_0_s grp_xFGradientY_16_0_s_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .vt0_val(trunc_ln469_reg_743),
    .vt1_val(trunc_ln475_reg_760),
    .vt2_val(8'd0),
    .vb0_val(trunc_ln467_reg_754),
    .vb1_val(trunc_ln472_reg_765),
    .vb2_val(8'd0),
    .ap_return(grp_xFGradientY_16_0_s_fu_153_ap_return),
    .ap_ce(grp_xFGradientY_16_0_s_fu_153_ap_ce)
);

scharr_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            GradientValuesX_fu_72 <= GradientValuesX_17_reload;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            GradientValuesX_fu_72 <= ref_tmp_reg_770;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            GradientValuesY_fu_68 <= GradientValuesY_18_reload;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            GradientValuesY_fu_68 <= ref_tmp1_reg_775;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln466_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_76 <= i_4_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln466_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            q_fu_80 <= q_1_fu_679_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            q_fu_80 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln466_reg_739 <= icmp_ln466_fu_188_p2;
        icmp_ln466_reg_739_pp0_iter1_reg <= icmp_ln466_reg_739;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln466_reg_739_pp0_iter2_reg <= icmp_ln466_reg_739_pp0_iter1_reg;
        icmp_ln466_reg_739_pp0_iter3_reg <= icmp_ln466_reg_739_pp0_iter2_reg;
        icmp_ln466_reg_739_pp0_iter4_reg <= icmp_ln466_reg_739_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln466_reg_739_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ref_tmp1_reg_775 <= grp_xFGradientY_16_0_s_fu_153_ap_return;
        ref_tmp_reg_770 <= grp_xFGradientX_16_0_s_fu_140_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln466_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln467_reg_754 <= trunc_ln467_fu_487_p1;
        trunc_ln469_reg_743 <= trunc_ln469_fu_299_p1;
        trunc_ln470_reg_749 <= trunc_ln470_fu_393_p1;
        trunc_ln472_reg_765 <= trunc_ln472_fu_675_p1;
        trunc_ln475_reg_760 <= trunc_ln475_fu_581_p1;
    end
end

always @ (*) begin
    if (((icmp_ln466_reg_739_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GradientValuesX_out_ap_vld = 1'b1;
    end else begin
        GradientValuesX_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln466_reg_739_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        GradientValuesY_out_ap_vld = 1'b1;
    end else begin
        GradientValuesY_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln466_fu_188_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_q_load = 5'd0;
    end else begin
        ap_sig_allocacmp_q_load = q_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp111) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_xFGradientX_16_0_s_fu_140_ap_ce = 1'b1;
    end else begin
        grp_xFGradientX_16_0_s_fu_140_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp112) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_xFGradientY_16_0_s_fu_153_ap_ce = 1'b1;
    end else begin
        grp_xFGradientY_16_0_s_fu_153_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GradientValuesX_out = GradientValuesX_fu_72;

assign GradientValuesY_out = GradientValuesY_fu_68;

assign and_ln468_fu_293_p2 = (lshr_ln468_fu_281_p2 & lshr_ln468_1_fu_287_p2);

assign and_ln469_fu_387_p2 = (lshr_ln469_fu_375_p2 & lshr_ln469_1_fu_381_p2);

assign and_ln470_fu_481_p2 = (lshr_ln470_fu_469_p2 & lshr_ln470_1_fu_475_p2);

assign and_ln473_fu_575_p2 = (lshr_ln473_fu_563_p2 & lshr_ln473_1_fu_569_p2);

assign and_ln475_fu_669_p2 = (lshr_ln475_fu_657_p2 & lshr_ln475_1_fu_663_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp111 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp112 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call49 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call80 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1_ignore_call49 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1_ignore_call80 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2_ignore_call49 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2_ignore_call80 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3_ignore_call49 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3_ignore_call80 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4_ignore_call49 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4_ignore_call80 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5_ignore_call49 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5_ignore_call80 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6_ignore_call49 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6_ignore_call80 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_4_fu_194_p2 = (ap_sig_allocacmp_i_3 + 2'd1);

assign icmp_ln466_fu_188_p2 = ((ap_sig_allocacmp_i_3 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln468_fu_209_p2 = ((ap_sig_allocacmp_q_load > or_ln468_fu_203_p2) ? 1'b1 : 1'b0);

assign icmp_ln469_fu_303_p2 = ((ap_sig_allocacmp_q_load > or_ln468_fu_203_p2) ? 1'b1 : 1'b0);

assign icmp_ln470_fu_397_p2 = ((ap_sig_allocacmp_q_load > or_ln468_fu_203_p2) ? 1'b1 : 1'b0);

assign icmp_ln473_fu_491_p2 = ((ap_sig_allocacmp_q_load > or_ln468_fu_203_p2) ? 1'b1 : 1'b0);

assign icmp_ln475_fu_585_p2 = ((ap_sig_allocacmp_q_load > or_ln468_fu_203_p2) ? 1'b1 : 1'b0);

assign lshr_ln468_1_fu_287_p2 = 24'd16777215 >> zext_ln468_1_fu_277_p1;

assign lshr_ln468_fu_281_p2 = select_ln468_1_fu_251_p3 >> zext_ln468_fu_273_p1;

assign lshr_ln469_1_fu_381_p2 = 24'd16777215 >> zext_ln469_1_fu_371_p1;

assign lshr_ln469_fu_375_p2 = select_ln469_1_fu_345_p3 >> zext_ln469_fu_367_p1;

assign lshr_ln470_1_fu_475_p2 = 24'd16777215 >> zext_ln470_1_fu_465_p1;

assign lshr_ln470_fu_469_p2 = select_ln470_1_fu_439_p3 >> zext_ln470_fu_461_p1;

assign lshr_ln473_1_fu_569_p2 = 24'd16777215 >> zext_ln473_1_fu_559_p1;

assign lshr_ln473_fu_563_p2 = select_ln473_1_fu_533_p3 >> zext_ln473_fu_555_p1;

assign lshr_ln475_1_fu_663_p2 = 24'd16777215 >> zext_ln475_1_fu_653_p1;

assign lshr_ln475_fu_657_p2 = select_ln475_1_fu_627_p3 >> zext_ln475_fu_649_p1;

assign or_ln468_fu_203_p2 = (ap_sig_allocacmp_q_load | 5'd7);

assign q_1_fu_679_p2 = (ap_sig_allocacmp_q_load + 5'd8);

assign select_ln468_1_fu_251_p3 = ((icmp_ln468_fu_209_p2[0:0] == 1'b1) ? tmp_fu_215_p4 : src_buf1_reload);

assign select_ln468_2_fu_259_p3 = ((icmp_ln468_fu_209_p2[0:0] == 1'b1) ? sub_ln468_1_fu_231_p2 : ap_sig_allocacmp_q_load);

assign select_ln468_fu_243_p3 = ((icmp_ln468_fu_209_p2[0:0] == 1'b1) ? sub_ln468_fu_225_p2 : sub_ln468_2_fu_237_p2);

assign select_ln469_1_fu_345_p3 = ((icmp_ln469_fu_303_p2[0:0] == 1'b1) ? tmp_1_fu_309_p4 : src_buf2_reload);

assign select_ln469_2_fu_353_p3 = ((icmp_ln469_fu_303_p2[0:0] == 1'b1) ? sub_ln469_1_fu_325_p2 : ap_sig_allocacmp_q_load);

assign select_ln469_fu_337_p3 = ((icmp_ln469_fu_303_p2[0:0] == 1'b1) ? sub_ln469_fu_319_p2 : sub_ln469_2_fu_331_p2);

assign select_ln470_1_fu_439_p3 = ((icmp_ln470_fu_397_p2[0:0] == 1'b1) ? tmp_2_fu_403_p4 : src_buf3_1_reload);

assign select_ln470_2_fu_447_p3 = ((icmp_ln470_fu_397_p2[0:0] == 1'b1) ? sub_ln470_1_fu_419_p2 : ap_sig_allocacmp_q_load);

assign select_ln470_fu_431_p3 = ((icmp_ln470_fu_397_p2[0:0] == 1'b1) ? sub_ln470_fu_413_p2 : sub_ln470_2_fu_425_p2);

assign select_ln473_1_fu_533_p3 = ((icmp_ln473_fu_491_p2[0:0] == 1'b1) ? tmp_3_fu_497_p4 : src_buf1_1_reload);

assign select_ln473_2_fu_541_p3 = ((icmp_ln473_fu_491_p2[0:0] == 1'b1) ? sub_ln473_1_fu_513_p2 : ap_sig_allocacmp_q_load);

assign select_ln473_fu_525_p3 = ((icmp_ln473_fu_491_p2[0:0] == 1'b1) ? sub_ln473_fu_507_p2 : sub_ln473_2_fu_519_p2);

assign select_ln475_1_fu_627_p3 = ((icmp_ln475_fu_585_p2[0:0] == 1'b1) ? tmp_4_fu_591_p4 : src_buf3_reload);

assign select_ln475_2_fu_635_p3 = ((icmp_ln475_fu_585_p2[0:0] == 1'b1) ? sub_ln475_1_fu_607_p2 : ap_sig_allocacmp_q_load);

assign select_ln475_fu_619_p3 = ((icmp_ln475_fu_585_p2[0:0] == 1'b1) ? sub_ln475_fu_601_p2 : sub_ln475_2_fu_613_p2);

assign sub_ln468_1_fu_231_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_q_load));

assign sub_ln468_2_fu_237_p2 = (or_ln468_fu_203_p2 - ap_sig_allocacmp_q_load);

assign sub_ln468_3_fu_267_p2 = ($signed(5'd23) - $signed(select_ln468_fu_243_p3));

assign sub_ln468_fu_225_p2 = (ap_sig_allocacmp_q_load - or_ln468_fu_203_p2);

assign sub_ln469_1_fu_325_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_q_load));

assign sub_ln469_2_fu_331_p2 = (or_ln468_fu_203_p2 - ap_sig_allocacmp_q_load);

assign sub_ln469_3_fu_361_p2 = ($signed(5'd23) - $signed(select_ln469_fu_337_p3));

assign sub_ln469_fu_319_p2 = (ap_sig_allocacmp_q_load - or_ln468_fu_203_p2);

assign sub_ln470_1_fu_419_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_q_load));

assign sub_ln470_2_fu_425_p2 = (or_ln468_fu_203_p2 - ap_sig_allocacmp_q_load);

assign sub_ln470_3_fu_455_p2 = ($signed(5'd23) - $signed(select_ln470_fu_431_p3));

assign sub_ln470_fu_413_p2 = (ap_sig_allocacmp_q_load - or_ln468_fu_203_p2);

assign sub_ln473_1_fu_513_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_q_load));

assign sub_ln473_2_fu_519_p2 = (or_ln468_fu_203_p2 - ap_sig_allocacmp_q_load);

assign sub_ln473_3_fu_549_p2 = ($signed(5'd23) - $signed(select_ln473_fu_525_p3));

assign sub_ln473_fu_507_p2 = (ap_sig_allocacmp_q_load - or_ln468_fu_203_p2);

assign sub_ln475_1_fu_607_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_q_load));

assign sub_ln475_2_fu_613_p2 = (or_ln468_fu_203_p2 - ap_sig_allocacmp_q_load);

assign sub_ln475_3_fu_643_p2 = ($signed(5'd23) - $signed(select_ln475_fu_619_p3));

assign sub_ln475_fu_601_p2 = (ap_sig_allocacmp_q_load - or_ln468_fu_203_p2);

integer ap_tvar_int_0;

always @ (src_buf2_reload) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            tmp_1_fu_309_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_309_p4[ap_tvar_int_0] = src_buf2_reload[23 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (src_buf3_1_reload) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 23 - 0) begin
            tmp_2_fu_403_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_2_fu_403_p4[ap_tvar_int_1] = src_buf3_1_reload[23 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (src_buf1_1_reload) begin
    for (ap_tvar_int_2 = 24 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 23 - 0) begin
            tmp_3_fu_497_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_3_fu_497_p4[ap_tvar_int_2] = src_buf1_1_reload[23 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (src_buf3_reload) begin
    for (ap_tvar_int_3 = 24 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 23 - 0) begin
            tmp_4_fu_591_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_4_fu_591_p4[ap_tvar_int_3] = src_buf3_reload[23 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (src_buf1_reload) begin
    for (ap_tvar_int_4 = 24 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 23 - 0) begin
            tmp_fu_215_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_fu_215_p4[ap_tvar_int_4] = src_buf1_reload[23 - ap_tvar_int_4];
        end
    end
end

assign trunc_ln467_fu_487_p1 = and_ln470_fu_481_p2[15:0];

assign trunc_ln469_fu_299_p1 = and_ln468_fu_293_p2[15:0];

assign trunc_ln470_fu_393_p1 = and_ln469_fu_387_p2[14:0];

assign trunc_ln472_fu_675_p1 = and_ln475_fu_669_p2[14:0];

assign trunc_ln475_fu_581_p1 = and_ln473_fu_575_p2[14:0];

assign zext_ln468_1_fu_277_p1 = sub_ln468_3_fu_267_p2;

assign zext_ln468_fu_273_p1 = select_ln468_2_fu_259_p3;

assign zext_ln469_1_fu_371_p1 = sub_ln469_3_fu_361_p2;

assign zext_ln469_fu_367_p1 = select_ln469_2_fu_353_p3;

assign zext_ln470_1_fu_465_p1 = sub_ln470_3_fu_455_p2;

assign zext_ln470_fu_461_p1 = select_ln470_2_fu_447_p3;

assign zext_ln473_1_fu_559_p1 = sub_ln473_3_fu_549_p2;

assign zext_ln473_fu_555_p1 = select_ln473_2_fu_541_p3;

assign zext_ln475_1_fu_653_p1 = sub_ln475_3_fu_643_p2;

assign zext_ln475_fu_649_p1 = select_ln475_2_fu_635_p3;

endmodule //scharr_accel_xFScharrFilterKernel_Pipeline_VITIS_LOOP_466_2
