// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module bilateral_filter_accel_xFBilateralFloatMul (
        ap_clk,
        ap_rst,
        in_val1,
        in_val2,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [31:0] in_val1;
input  [31:0] in_val2;
output  [31:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
wire   [31:0] grp_fu_18_p2;
reg   [31:0] in_val1_int_reg;
reg   [31:0] in_val2_int_reg;
wire    ap_ce_reg;

bilateral_filter_accel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_val1_int_reg),
    .din1(in_val2_int_reg),
    .ce(1'b1),
    .dout(grp_fu_18_p2)
);

always @ (posedge ap_clk) begin
    in_val1_int_reg <= in_val1;
end

always @ (posedge ap_clk) begin
    in_val2_int_reg <= in_val2;
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_return = grp_fu_18_p2;

endmodule //bilateral_filter_accel_xFBilateralFloatMul
