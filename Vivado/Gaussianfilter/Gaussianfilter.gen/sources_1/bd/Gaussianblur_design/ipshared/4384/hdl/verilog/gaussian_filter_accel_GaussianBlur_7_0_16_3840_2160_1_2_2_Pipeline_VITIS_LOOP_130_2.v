// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gaussian_filter_accel_GaussianBlur_7_0_16_3840_2160_1_2_2_Pipeline_VITIS_LOOP_130_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cf_address0,
        cf_ce0,
        cf_we0,
        cf_d0,
        cf_address1,
        cf_ce1,
        cf_q1,
        sum,
        weights_3_out,
        weights_3_out_ap_vld,
        weights_2_out,
        weights_2_out_ap_vld,
        weights_1_out,
        weights_1_out_ap_vld,
        weights_out,
        weights_out_ap_vld,
        grp_fu_135_p_din0,
        grp_fu_135_p_din1,
        grp_fu_135_p_dout0,
        grp_fu_135_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] cf_address0;
output   cf_ce0;
output   cf_we0;
output  [31:0] cf_d0;
output  [2:0] cf_address1;
output   cf_ce1;
input  [31:0] cf_q1;
input  [31:0] sum;
output  [7:0] weights_3_out;
output   weights_3_out_ap_vld;
output  [7:0] weights_2_out;
output   weights_2_out_ap_vld;
output  [7:0] weights_1_out;
output   weights_1_out_ap_vld;
output  [7:0] weights_out;
output   weights_out_ap_vld;
output  [31:0] grp_fu_135_p_din0;
output  [31:0] grp_fu_135_p_din1;
input  [31:0] grp_fu_135_p_dout0;
output   grp_fu_135_p_ce;

reg ap_idle;
reg cf_ce0;
reg cf_we0;
reg cf_ce1;
reg weights_3_out_ap_vld;
reg weights_2_out_ap_vld;
reg weights_1_out_ap_vld;
reg weights_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln130_fu_174_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] i_reg_380;
reg   [2:0] i_reg_380_pp0_iter1_reg;
reg   [2:0] i_reg_380_pp0_iter2_reg;
reg   [2:0] i_reg_380_pp0_iter3_reg;
reg   [2:0] i_reg_380_pp0_iter4_reg;
reg   [2:0] i_reg_380_pp0_iter5_reg;
reg   [2:0] i_reg_380_pp0_iter6_reg;
reg   [2:0] i_reg_380_pp0_iter7_reg;
reg   [2:0] i_reg_380_pp0_iter8_reg;
reg   [2:0] i_reg_380_pp0_iter9_reg;
reg   [2:0] i_reg_380_pp0_iter10_reg;
reg   [2:0] i_reg_380_pp0_iter11_reg;
reg   [2:0] i_reg_380_pp0_iter12_reg;
reg   [2:0] i_reg_380_pp0_iter13_reg;
reg   [2:0] i_reg_380_pp0_iter14_reg;
reg   [2:0] i_reg_380_pp0_iter15_reg;
reg   [2:0] i_reg_380_pp0_iter16_reg;
reg   [2:0] i_reg_380_pp0_iter17_reg;
reg   [2:0] i_reg_380_pp0_iter18_reg;
reg   [2:0] i_reg_380_pp0_iter19_reg;
reg   [0:0] icmp_ln130_reg_384;
reg   [0:0] icmp_ln130_reg_384_pp0_iter1_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter2_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter3_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter4_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter5_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter6_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter7_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter8_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter9_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter10_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter11_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter12_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter13_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter14_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter15_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter16_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter17_reg;
reg   [0:0] icmp_ln130_reg_384_pp0_iter18_reg;
reg   [2:0] cf_addr_reg_388;
reg   [2:0] cf_addr_reg_388_pp0_iter1_reg;
reg   [2:0] cf_addr_reg_388_pp0_iter2_reg;
reg   [2:0] cf_addr_reg_388_pp0_iter3_reg;
reg   [2:0] cf_addr_reg_388_pp0_iter4_reg;
reg   [2:0] cf_addr_reg_388_pp0_iter5_reg;
reg   [31:0] cf_load_reg_394;
reg   [31:0] mul19_i_reg_399;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] mul24_i_reg_405;
wire   [63:0] grp_fu_158_p1;
reg   [63:0] conv25_i_reg_410;
reg   [10:0] xs_exp_reg_415;
wire   [51:0] trunc_ln534_fu_210_p1;
reg   [51:0] trunc_ln534_reg_421;
wire   [0:0] tmp_fu_236_p3;
reg   [0:0] tmp_reg_426;
reg   [0:0] tmp_1_reg_431;
reg   [7:0] tmp_4_reg_436;
wire   [63:0] trunc_ln130_cast_fu_186_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_3_fu_78;
wire   [2:0] add_ln130_fu_180_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
reg   [7:0] result_fu_82;
wire   [7:0] val_fu_302_p3;
reg   [7:0] result_1_fu_86;
reg   [7:0] result_2_fu_90;
reg   [7:0] result_3_fu_94;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] grp_fu_161_p2;
wire   [63:0] data_fu_196_p1;
wire   [53:0] mantissa_fu_214_p4;
wire   [11:0] zext_ln515_fu_227_p1;
wire   [11:0] add_ln515_fu_230_p2;
wire   [10:0] sub_ln71_fu_244_p2;
wire  signed [11:0] sext_ln71_fu_249_p1;
wire   [11:0] select_ln71_fu_253_p3;
wire  signed [31:0] sext_ln71_1_fu_261_p1;
wire   [112:0] zext_ln68_fu_223_p1;
wire   [112:0] zext_ln71_fu_265_p1;
wire   [112:0] lshr_ln71_fu_269_p2;
wire   [112:0] shl_ln71_fu_275_p2;
wire   [7:0] zext_ln74_fu_299_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gaussian_filter_accel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul19_i_reg_399),
    .din1(32'd1132462080),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

gaussian_filter_accel_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul24_i_reg_405),
    .ce(1'b1),
    .dout(grp_fu_158_p1)
);

gaussian_filter_accel_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv25_i_reg_410),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

gaussian_filter_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter19_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln130_fu_174_p2 == 1'd0))) begin
            i_3_fu_78 <= add_ln130_fu_180_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_78 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        cf_addr_reg_388_pp0_iter2_reg <= cf_addr_reg_388_pp0_iter1_reg;
        cf_addr_reg_388_pp0_iter3_reg <= cf_addr_reg_388_pp0_iter2_reg;
        cf_addr_reg_388_pp0_iter4_reg <= cf_addr_reg_388_pp0_iter3_reg;
        cf_addr_reg_388_pp0_iter5_reg <= cf_addr_reg_388_pp0_iter4_reg;
        conv25_i_reg_410 <= grp_fu_158_p1;
        i_reg_380_pp0_iter10_reg <= i_reg_380_pp0_iter9_reg;
        i_reg_380_pp0_iter11_reg <= i_reg_380_pp0_iter10_reg;
        i_reg_380_pp0_iter12_reg <= i_reg_380_pp0_iter11_reg;
        i_reg_380_pp0_iter13_reg <= i_reg_380_pp0_iter12_reg;
        i_reg_380_pp0_iter14_reg <= i_reg_380_pp0_iter13_reg;
        i_reg_380_pp0_iter15_reg <= i_reg_380_pp0_iter14_reg;
        i_reg_380_pp0_iter16_reg <= i_reg_380_pp0_iter15_reg;
        i_reg_380_pp0_iter17_reg <= i_reg_380_pp0_iter16_reg;
        i_reg_380_pp0_iter18_reg <= i_reg_380_pp0_iter17_reg;
        i_reg_380_pp0_iter19_reg <= i_reg_380_pp0_iter18_reg;
        i_reg_380_pp0_iter2_reg <= i_reg_380_pp0_iter1_reg;
        i_reg_380_pp0_iter3_reg <= i_reg_380_pp0_iter2_reg;
        i_reg_380_pp0_iter4_reg <= i_reg_380_pp0_iter3_reg;
        i_reg_380_pp0_iter5_reg <= i_reg_380_pp0_iter4_reg;
        i_reg_380_pp0_iter6_reg <= i_reg_380_pp0_iter5_reg;
        i_reg_380_pp0_iter7_reg <= i_reg_380_pp0_iter6_reg;
        i_reg_380_pp0_iter8_reg <= i_reg_380_pp0_iter7_reg;
        i_reg_380_pp0_iter9_reg <= i_reg_380_pp0_iter8_reg;
        icmp_ln130_reg_384_pp0_iter10_reg <= icmp_ln130_reg_384_pp0_iter9_reg;
        icmp_ln130_reg_384_pp0_iter11_reg <= icmp_ln130_reg_384_pp0_iter10_reg;
        icmp_ln130_reg_384_pp0_iter12_reg <= icmp_ln130_reg_384_pp0_iter11_reg;
        icmp_ln130_reg_384_pp0_iter13_reg <= icmp_ln130_reg_384_pp0_iter12_reg;
        icmp_ln130_reg_384_pp0_iter14_reg <= icmp_ln130_reg_384_pp0_iter13_reg;
        icmp_ln130_reg_384_pp0_iter15_reg <= icmp_ln130_reg_384_pp0_iter14_reg;
        icmp_ln130_reg_384_pp0_iter16_reg <= icmp_ln130_reg_384_pp0_iter15_reg;
        icmp_ln130_reg_384_pp0_iter17_reg <= icmp_ln130_reg_384_pp0_iter16_reg;
        icmp_ln130_reg_384_pp0_iter18_reg <= icmp_ln130_reg_384_pp0_iter17_reg;
        icmp_ln130_reg_384_pp0_iter2_reg <= icmp_ln130_reg_384_pp0_iter1_reg;
        icmp_ln130_reg_384_pp0_iter3_reg <= icmp_ln130_reg_384_pp0_iter2_reg;
        icmp_ln130_reg_384_pp0_iter4_reg <= icmp_ln130_reg_384_pp0_iter3_reg;
        icmp_ln130_reg_384_pp0_iter5_reg <= icmp_ln130_reg_384_pp0_iter4_reg;
        icmp_ln130_reg_384_pp0_iter6_reg <= icmp_ln130_reg_384_pp0_iter5_reg;
        icmp_ln130_reg_384_pp0_iter7_reg <= icmp_ln130_reg_384_pp0_iter6_reg;
        icmp_ln130_reg_384_pp0_iter8_reg <= icmp_ln130_reg_384_pp0_iter7_reg;
        icmp_ln130_reg_384_pp0_iter9_reg <= icmp_ln130_reg_384_pp0_iter8_reg;
        mul19_i_reg_399 <= grp_fu_135_p_dout0;
        mul24_i_reg_405 <= grp_fu_153_p2;
        tmp_1_reg_431 <= lshr_ln71_fu_269_p2[32'd53];
        tmp_4_reg_436 <= {{shl_ln71_fu_275_p2[60:53]}};
        tmp_reg_426 <= add_ln515_fu_230_p2[32'd11];
        trunc_ln534_reg_421 <= trunc_ln534_fu_210_p1;
        xs_exp_reg_415 <= {{data_fu_196_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        cf_addr_reg_388_pp0_iter1_reg <= cf_addr_reg_388;
        i_reg_380 <= ap_sig_allocacmp_i;
        i_reg_380_pp0_iter1_reg <= i_reg_380;
        icmp_ln130_reg_384 <= icmp_ln130_fu_174_p2;
        icmp_ln130_reg_384_pp0_iter1_reg <= icmp_ln130_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln130_fu_174_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cf_addr_reg_388 <= trunc_ln130_cast_fu_186_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cf_load_reg_394 <= cf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (i_reg_380_pp0_iter19_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_1_fu_86 <= val_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (i_reg_380_pp0_iter19_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_2_fu_90 <= val_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (i_reg_380_pp0_iter19_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_3_fu_94 <= val_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (i_reg_380_pp0_iter19_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_fu_82 <= val_fu_302_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln130_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter19_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_78;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cf_ce0 = 1'b1;
    end else begin
        cf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cf_ce1 = 1'b1;
    end else begin
        cf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cf_we0 = 1'b1;
    end else begin
        cf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_reg_384_pp0_iter18_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_1_out_ap_vld = 1'b1;
    end else begin
        weights_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_reg_384_pp0_iter18_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_2_out_ap_vld = 1'b1;
    end else begin
        weights_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_reg_384_pp0_iter18_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_3_out_ap_vld = 1'b1;
    end else begin
        weights_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_reg_384_pp0_iter18_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_out_ap_vld = 1'b1;
    end else begin
        weights_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_fu_180_p2 = (ap_sig_allocacmp_i + 3'd1);

assign add_ln515_fu_230_p2 = ($signed(zext_ln515_fu_227_p1) + $signed(12'd3073));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cf_address0 = cf_addr_reg_388_pp0_iter5_reg;

assign cf_address1 = trunc_ln130_cast_fu_186_p1;

assign cf_d0 = mul19_i_reg_399;

assign data_fu_196_p1 = grp_fu_161_p2;

assign grp_fu_135_p_ce = 1'b1;

assign grp_fu_135_p_din0 = cf_load_reg_394;

assign grp_fu_135_p_din1 = sum;

assign icmp_ln130_fu_174_p2 = ((ap_sig_allocacmp_i == 3'd7) ? 1'b1 : 1'b0);

assign lshr_ln71_fu_269_p2 = zext_ln68_fu_223_p1 >> zext_ln71_fu_265_p1;

assign mantissa_fu_214_p4 = {{{{1'd1}, {trunc_ln534_reg_421}}}, {1'd0}};

assign select_ln71_fu_253_p3 = ((tmp_fu_236_p3[0:0] == 1'b1) ? sext_ln71_fu_249_p1 : add_ln515_fu_230_p2);

assign sext_ln71_1_fu_261_p1 = $signed(select_ln71_fu_253_p3);

assign sext_ln71_fu_249_p1 = $signed(sub_ln71_fu_244_p2);

assign shl_ln71_fu_275_p2 = zext_ln68_fu_223_p1 << zext_ln71_fu_265_p1;

assign sub_ln71_fu_244_p2 = (11'd1023 - xs_exp_reg_415);

assign tmp_fu_236_p3 = add_ln515_fu_230_p2[32'd11];

assign trunc_ln130_cast_fu_186_p1 = ap_sig_allocacmp_i;

assign trunc_ln534_fu_210_p1 = data_fu_196_p1[51:0];

assign val_fu_302_p3 = ((tmp_reg_426[0:0] == 1'b1) ? zext_ln74_fu_299_p1 : tmp_4_reg_436);

assign weights_1_out = result_1_fu_86;

assign weights_2_out = result_2_fu_90;

assign weights_3_out = result_3_fu_94;

assign weights_out = result_fu_82;

assign zext_ln515_fu_227_p1 = xs_exp_reg_415;

assign zext_ln68_fu_223_p1 = mantissa_fu_214_p4;

assign zext_ln71_fu_265_p1 = $unsigned(sext_ln71_1_fu_261_p1);

assign zext_ln74_fu_299_p1 = tmp_1_reg_431;

endmodule //gaussian_filter_accel_GaussianBlur_7_0_16_3840_2160_1_2_2_Pipeline_VITIS_LOOP_130_2
